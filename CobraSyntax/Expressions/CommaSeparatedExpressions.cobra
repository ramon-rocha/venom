
namespace Venom.CobraSyntax

class CommaSeparatedExpressions
	"""
	Not an actual syntax node, only for convenience.
	"""

	invariant
		.expressions.count == 0 implies .commas.count == 0
		.expressions.count > 0 implies .commas.count == .expressions.count - 1

	get expressions from var as IReadOnlyList<of IExpression> = ExpressionList()
	get commas from var as IReadOnlyTokenList = TokenList()

	def parse(stream as ITokenStream, stopKind = TokenKind.CloseParenthesis) as CommaSeparatedExpressions is shared
		list = CommaSeparatedExpressions()
		exprs = list.expressions to ExpressionList
		commas = list.commas to TokenList

		# change the precedence of the stop kind to avoid parsing this:
		# a, b = c, d  --> (a) (b = c) (d)
		defaultMap = TokenKind.binaryOperatorPrecedence to IDictionary<of String, int>
		precedenceMap = Dictionary<of String, int>(defaultMap)
		precedenceMap[stopKind] = -1

		while stream.token.kind <> stopKind and not stream.token.isEOF
			if exprs.count <> 0, commas.add(stream.expect(TokenKind.Comma))
			exprs.add(Expression.parse(stream, precedenceMap))
		return list