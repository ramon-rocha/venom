
namespace Venom.CobraSyntax

interface IExpression
	inherits ISyntaxNode
	pass

mixin ExpressionBehavior
	pass

class Expression
	implements IExpression
	inherits SyntaxNode
	adds ExpressionBehavior
	is abstract
	"""
	An abstract syntax node for an expression.
	
	If possible, do not put an implementation in this class.  Put it in ExpressionBehavior.
	"""
	def parse(stream as ITokenStream) as IExpression is new, shared
		return _parse(stream, 0, nil)

	def _parse(stream as ITokenStream, precedence as int, leftExpr as IExpression?) as IExpression is shared
		left = leftExpr ? _parse(stream)
		# TODO

		while true
			
			opKind = stream.token.kind

			if opKind == TokenKind.ReferenceEqualityOperator _
			and stream.peek.kind == TokenKind.LogicalNotOperator
				prev = stream.grab
				stream.replace(prev.copy(TokenKind.NonReferenceEqualityOperator, "is not"))
				opKind = stream.token.kind
			else if opKind == TokenKind.LogicalNotOperator _
			and stream.peek.kind == TokenKind.MembershipCheckOperator
				prev = stream.grab
				stream.replace(prev.copy(TokenKind.NonMembershipCheckOperator, "not in"))
				opKind = stream.token.kind
			
			binaryOpPrecedence as int
			if not TokenKind.binaryOperatorPrecedence.tryGetValue(opKind, out binaryOpPrecedence) _
			or binaryOpPrecedence < precedence
				return left
			
			if opKind == TokenKind.IndexerStart
				indexer = IndexerExpression.parse(stream)
				return _parse(stream, precedence, IndexedExpression(left, indexer))

			else if opKind == TokenKind.OpenParenthesis
				# TODO see CobraParser line 2921
				return left
			
			opToken = stream.grab
			assert opKind == opToken.kind
			assert TokenKind.binaryOperatorPrecedence.containsKey(opKind)
			precedence = binaryOpPrecedence
			if Cobra.Compiler.OperatorSpecs.rightAssoc.containsKey(opKind) # TODO: move into Venom
				precedence += 1
			
			right as IExpression? = nil
			if opKind == TokenKind.TypeCastOperator or opKind == TokenKind.NilCoalescingCastOperator
				right = TypeExpression.parse(stream)
			else if opKind == TokenKind.MemberAccessOperator and stream.token.isKeyword
				stream.replace(stream.token.copy(TokenKind.Identifier))
				right = IdentifierExpression.parse(stream) # TODO: MemberExpression.parse(stream)
			else
				right = _parse(stream, precedence, nil)
			
			left = BinaryOperatorExpression(left, opToken, right) # TODO return subclass based on opKind

		return left

	def _parse(stream as ITokenStream) as IExpression is shared
		
		kind = stream.token.kind

		if TokenKind.unaryOperatorPrecedence.containsKey(kind)
			return UnaryOperatorExpression.parse(stream)
		
		else if kind in CollectionLiteral.validKinds
			return CollectionLiteral.parse(stream)
		
		else if kind in StringLiteral.validKinds
			return StringLiteral.parse(stream)
		
		branch kind

			on TokenKind.Identifier, return IdentifierExpression.parse(stream)
			
			on TokenKind.CallStart
				return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO

			on TokenKind.GenericIdentifierStart
				return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO

			on TokenKind.OpenParenthesis
				return ParenthesizedExpression.parse(stream)
			
			on TokenKind.MemberAccessOperator
				# leading dot such as in '.foo'
				implicitThis = ThisLiteral(stream.expect(TokenKind.ThisKeyword))
				return implicitThis
			
			on TokenKind.NilKeyword, return NilLiteral(stream.grab)
			on TokenKind.TrueKeyword or TokenKind.FalseKeyword, return BooleanLiteral(stream.grab)
			on TokenKind.ThisKeyword, return ThisLiteral(stream.grab)
			on TokenKind.BaseKeyword, return BaseLiteral(stream.grab)

			on TokenKind.FieldKeyword
				# TODO, shouldn't be here, right?  this is for things such as 'get foo from var'
				return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO

			on TokenKind.SingleQuotedCharacter or TokenKind.DoubleQuotedCharacter
				return CharacterLiteral(stream.grab)
			
			on TokenKind.IntegerLiteral, return IntegerLiteral(stream.grab)
			on TokenKind.FractionLiteral, return FractionLiteral(stream.grab)
			on TokenKind.DecimalLiteral, return DecimalLiteral(stream.grab)
			on TokenKind.FloatLiteral, return FloatLiteral(stream.grab)
			
			on TokenKind.DoKeyword or TokenKind.AnonymousMethodStart
				return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO
			
			on TokenKind.IfExpressionStart
				return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO

			on TokenKind.ForKeyword
				return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO
			
			on TokenKind.TryKeyword
				return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO

			else
				trace stream.token  # TODO : see CobraParser line 3109
		
		return IdentifierExpression(Identifier(Cobra.Compiler.Token.empty)) # TODO

	def toCobraSource as String is override
		return "TODO"


