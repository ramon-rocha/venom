namespace Venom.CobraSyntax

class IdentifierExpression
	inherits Expression
	adds NamedBehavior

	invariant
		.name == .identifier.name

	get identifier from var as Identifier
	get typeSpecification from var as ExplicitTypeSpecification?

	def parse(stream as ITokenStream) as IdentifierExpression is new, shared
		require
			stream.token.kind == TokenKind.Identifier
		test
			source = "foo"
			stream = TokenStream(source, 'test.cobra')
			ie = IdentifierExpression.parse(stream)
			assert ie.identifier.name == "foo"
			assert ie.typeSpecification == nil
		test
			source = "foo as String"
			stream = TokenStream(source, 'test.cobra')
			ie = IdentifierExpression.parse(stream)
			assert ie.identifier.name == "foo"
			assert ie.typeSpecification <> nil
			assert ie.typeSpecification.identifier.name == "String"
		body
			id = Identifier.parse(stream)
			if stream.token.kind == TokenKind.AsKeyword
				typeSpec = ExplicitTypeSpecification.parse(stream) to ?
			return IdentifierExpression(id, typeSpec)

	cue init(id as Identifier, typeSpec as ExplicitTypeSpecification?)
		base.init(id, nil)
		_identifier = id
		_name = id.name
		if typeSpec <> nil
			_typeSpecification = typeSpec
			_addChild(typeSpec)

class ExplicitTypeSpecification inherits SyntaxNode
	"""
	as Foo.Bar?
	"""
	get asKeyword from var as Cobra.Compiler.IToken
	get identifier from var as TypeIdentifier

	def parse(stream as ITokenStream) as ExplicitTypeSpecification is new, shared
		require stream.token.kind == TokenKind.AsKeyword
		kw = stream.expect(TokenKind.AsKeyword)
		id = TypeIdentifier.parse(stream)
		return ExplicitTypeSpecification(kw, id)

	cue init(kw as Cobra.Compiler.IToken, typeId as TypeIdentifier)
		base.init(kw, nil)
		_asKeyword = kw
		_identifier = typeId
		_addChild(typeId)