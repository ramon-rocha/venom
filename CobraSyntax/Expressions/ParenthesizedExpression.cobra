
namespace Venom.CobraSyntax

class ParenthesizedExpression inherits Expression
	
	def parse(stream as ITokenStream) as ParenthesizedExpression is new, shared
		test basics
			source =
			"(a + b) * (a - b)"
			stream = TokenStream(source, 'test.cobra')
			multExpr = Expression.parse(stream) to MultiplicationExpression
			left = multExpr.leftExpression to ParenthesizedExpression
			right = multExpr.rightExpression to ParenthesizedExpression
			assert left.expression inherits AdditionExpression
			assert right.expression inherits SubtractionExpression
			assert left.firstToken.lineNum == right.lastToken.lineNum
		test whiteSpaceAgnostic
			source =
			"(\n" +
			"    a + b\n" +
			") * (\n" +
			"       a - b\n" +
			")"
			stream = TokenStream(source, 'test.cobra')
			multExpr = Expression.parse(stream) to MultiplicationExpression
			left = multExpr.leftExpression to ParenthesizedExpression
			right = multExpr.rightExpression to ParenthesizedExpression
			assert left.expression inherits AdditionExpression
			assert right.expression inherits SubtractionExpression
			assert left.firstToken.lineNum < right.lastToken.lineNum
		body
			openParen = stream.expect(TokenKind.OpenParenthesis)
			if not stream implements IWhitespaceAgnosticTokenStream
				stream = WhitespaceAgnosticTokenStreamWrapper(stream)
			expr = Expression.parse(stream)
			closeParen = stream.expect(TokenKind.CloseParenthesis)
			return ParenthesizedExpression(openParen, expr, closeParen)

	cue init(openParen as Cobra.Compiler.IToken, expression as IExpression, closeParen as Cobra.Compiler.IToken)
		base.init(openParen, closeParen, nil)
		_openParenthesis, _expression, _closeParenthesis = openParen, expression, closeParen
		_addChild(expression)
	
	get openParenthesis from var as Cobra.Compiler.IToken
	get expression from var as IExpression
	get closeParenthesis from var as Cobra.Compiler.IToken