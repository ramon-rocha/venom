
namespace Venom.CobraSyntax

interface IMemberDeclaration
	inherits IStatement, INamedNode, IDocumentable
	"""
	A statement that declares a member of a type or namespace
	"""
	pass

class MemberDeclaration
	inherits Statement
	implements IMemberDeclaration
	adds NamedBehavior, DocumentationBehavior
	is abstract
	"""
	This is the base class for member declarations.  This includes namespaces,
	type definitions, fields, properties, and methods. However, this does not
	include local variables, method parameters, or use directives.
	"""
	
	cue init(
		keywordToken as Cobra.Compiler.IToken,
		identifier as Identifier,
		indentToken as Cobra.Compiler.IToken?,
		docString as DocString?,
		dedentToken as Cobra.Compiler.IToken?,
		children as NodeList?,
		extraTokens as TokenList?
	)
		require
			keywordToken.isKeyword
			not (this inherits NamespaceDeclaration) implies _
				(docString implies (indentToken and dedentToken))
		body
			base.init(keywordToken, identifier.firstToken, extraTokens)
			_identifier = identifier
			_name = identifier.name
			_addChild(identifier)
			_indentToken, _dedentToken = indentToken, _dedentToken = dedentToken
			if docString <> nil
				_lastToken = docString.lastToken
				_addChild(docString)
				_docString = docString
			if children <> nil
				_addChildren(children)
			if dedentToken <> nil
				_lastToken = dedentToken
	
	get keywordToken as Cobra.Compiler.IToken
		return _firstToken
	
	get identifier from var as Identifier
	get indentToken from var as Cobra.Compiler.IToken?
	get dedentToken from var as Cobra.Compiler.IToken?


interface ITypeMemberDeclaration inherits IMemberDeclaration
	"""
	A declaration statement for a member of a type
	"""
	pass

class TypeMemberDeclaration
	inherits MemberDeclaration
	implements ITypeMemberDeclaration
	is abstract
	"""
	A member declaration that appears inside a type declaration
	"""
	def parse(stream as ITokenStream) as ITypeMemberDeclaration? is new, shared
		stream.skipBlankLines
		kind = stream.token.kind
		if kind in TokenKind.typeDeclarationKeywords
			return TypeDeclaration.parse(stream)
		else if kind in TokenKind.modifierKeywords
			return ModifierBlock.parse(stream)
		
		branch kind
			on TokenKind.CueKeyword
				return nil # TODO
			on TokenKind.MethodKeyword
				return MethodDeclaration.parse(stream)
			on TokenKind.GetterKeyword
				return nil # TODO
			on TokenKind.SetterKeyword
				return nil # TODO
			on TokenKind.PropertyKeyword
				return nil # TODO
			on TokenKind.FieldKeyword
				return FieldDeclaration.parse(stream)
			on TokenKind.ConstKeyword
				return nil # TODO
			on TokenKind.InvariantKeyord
				return nil # TODO
			on TokenKind.EventKeyword
				return nil # TODO
			on TokenKind.TestKeyword
				return nil # TODO
		
		return nil # TODO


class ModifierBlock inherits TypeMemberDeclaration
	pass #TODO

class FieldDeclaration inherits TypeMemberDeclaration
	
	cue init(
		varToken as Cobra.Compiler.IToken,
		identifier as Identifier,
		indent as Cobra.Compiler.IToken?,
		docString as DocString?,
		dedent as Cobra.Compiler.IToken?,
		isToken as Cobra.Compiler.IToken?,
		isValues as TokenList?,
		hasToken as Cobra.Compiler.IToken?,
		attributes as NodeList?,
		extraTokens as TokenList?
	)
		require varToken.which == TokenKind.FieldKeyword
		base.init(varToken, identifier, indent, docString, dedent, nil, extraTokens)
		#TODO: initializer


class MethodSpecification
	inherits SyntaxNode
	"""
	Contains information about the access modifiers, implemented interfaces,
	attributes, etc. that a method declaration adheres to.
	"""

	def parse(stream as ITokenStream) as MethodSpecification? is new, shared
		# TODO
		stream.skipBlankLines
		return nil
	
	var _isNames as IList<of String>
	get isNames from var as IReadOnlyList<of String>

	var _attributes as IList<of String>
	get attributes from var as IReadOnlyList<of ISyntaxNode> # TODO: real type

	var _interfaces as IList<of QualifiedIdentifier>
	get interfaces from var as IReadOnlyList<of QualifiedIdentifier>

	var _genericConstraints as IList<of ISyntaxNode>
	get genericConstraints from var as IReadOnlyList<of ISyntaxNode> # TODO: real type

	get indentToken from var as Cobra.Compiler.IToken?
	get isIndented as bool
		return _indentToken <> nil
	
	cue init
		# TODO
		base.init
		_isNames = List<of String>()
		_attributes = List<of String>()
		_interfaces = List<of QualifiedIdentifier>()
		_genericConstraints = List<of ISyntaxNode>()
	
	def toCobraSource as String is override
		return "TODO"

class MethodDeclaration inherits TypeMemberDeclaration
	
	get signature from var as MethodSignature?
	get specification from var as MethodSpecification?
	var _statements as StatementList
	get statements from var as IReadOnlyList<of IStatement>

	def parse(stream as ITokenStream) as MethodDeclaration is new, shared
		require
			stream.token.kind == TokenKind.MethodKeyword
		test
			pass
		body
			defToken = stream.expect(TokenKind.MethodKeyword)
			id = Identifier.parse(stream)
			if id.firstToken.kind == TokenKind.CallStart
				signature = MethodSignature.parse(stream) to ?
			
			specs = MethodSpecification.parse(stream)
			if specs == nil or not specs.isIndented
				indent = stream.grabOptional(TokenKind.Indent)
				stream.skipBlankLines
			
			if stream.token.startsDocString
				docString = DocString.parse(stream)
				stream.skipBlankLines
			
			# TODO: method body
	
			stream.skipBlankLines
			dedent = stream.expect(TokenKind.Dedent)
			return MethodDeclaration(defToken, id, signature, specs, indent, docString, dedent, StatementList(), nil)

	cue init(
		defToken as Cobra.Compiler.IToken,
		identifier as Identifier,
		signature as MethodSignature?,
		specs as MethodSpecification?,
		indent as Cobra.Compiler.IToken?,
		docString as DocString?,
		dedent as Cobra.Compiler.IToken?,
		statements as StatementList,
		extraTokens as TokenList?
	)
		require defToken.which == TokenKind.MethodKeyword
		base.init(defToken, identifier, indent, docString, dedent, nil, extraTokens)
		if specs <> nil, _specification = specs
		if signature <> nil
			_signature = signature
			_addChild(signature)
		_statements = StatementList(statements)
		_lastToken = _statements.last.lastToken
		for s in _statements, _addChild(s)
	
	/#
	var _statements as IReadOnlyList<of IStatement>? = nil
	get statements as IReadOnlyList<of IStatement>
		if _statements == nil
			stmts = List<of IStatement>(_children.count)
			for node in _bodySection
				if node implements IStatement, stmts.add(node)
			_statements = stmts
		return _statements to !
	#/

interface INamespaceMemberDeclaration inherits IMemberDeclaration
	"""
	A declaration statement for a member of a namespace
	"""
	pass

class NamespaceDeclaration
	inherits MemberDeclaration
	implements INamespaceMemberDeclaration
	"""
	This node repesents a namespace declaration
	"""
	
	cue init(
		nsToken as Cobra.Compiler.IToken,
		identifier as QualifiedIdentifier,
		children as NodeList?,
		extraTokens as TokenList? = nil
	)
		require nsToken.which == TokenKind.NamespaceKeyword
		base.init(nsToken, identifier, nil, nil, nil, children, extraTokens) # TODO