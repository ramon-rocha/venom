
namespace Venom.CobraSyntax

class TypeSpecification
	inherits SyntaxNode
	"""
	Contains information about the access modifiers, base class,
	implemented interfaces, attributes, etc. that a type declaration
	adheres to.
	"""

	def parse(stream as ITokenStream) as TypeSpecification? is new, shared
		# TODO
		stream.skipBlankLines
		return nil
	
	var _isNames as IList<of String>
	get isNames from var as IReadOnlyList<of String>

	var _attributes as IList<of String>
	get attributes from var as IReadOnlyList<of ISyntaxNode> # TODO: real type

	var _baseTypes as IList<of QualifiedIdentifier>
	get baseTypes from var as IReadOnlyList<of QualifiedIdentifier>

	var _interfaces as IList<of QualifiedIdentifier>
	get interfaces from var as IReadOnlyList<of QualifiedIdentifier>

	var _mixins as IList<of QualifiedIdentifier>
	get mixins from var as IReadOnlyList<of QualifiedIdentifier>

	var _genericConstraints as IList<of ISyntaxNode>
	get genericConstraints from var as IReadOnlyList<of ISyntaxNode> # TODO: real type

	get indentToken from var as Cobra.Compiler.IToken?
	get isIndented as bool
		return _indentToken <> nil
	
	cue init
		# TODO
		base.init
		_isNames = List<of String>()
		_attributes = List<of String>()
		_baseTypes = List<of QualifiedIdentifier>()
		_interfaces = List<of QualifiedIdentifier>()
		_mixins = List<of QualifiedIdentifier>()
		_genericConstraints = List<of ISyntaxNode>()
	
	def toCobraSource as String is override
		return "TODO"



class TypeDeclaration
	inherits MemberDeclaration
	is abstract
	"""
	This is the base class for member declarations of type definitions
	such as classes, interfaces, structs, etc.
	"""
	var _typeMap as IReadOnlyDictionary<of String, Type> is readonly, shared = {
		TokenKind.ClassKeyword : ClassDeclaration,
		TokenKind.InterfaceKeyword : InterfaceDeclaration
	}

	def parse(stream as ITokenStream) as TypeDeclaration is new, shared
		require stream.token.kind in TokenKind.typeDeclarationKeywords
		kw = stream.grabOneOf(TokenKind.typeDeclarationKeywords)
		id = Identifier.parse(stream)
		specs = TypeSpecification.parse(stream)
		if specs == nil or not specs.isIndented
			indent = stream.expect(TokenKind.Indent)
			stream.skipBlankLines
		
		if stream.token.startsDocString
			docString = DocString.parse(stream)
			stream.skipBlankLines
		
		memberDecls = List<of TypeMemberDeclaration>()
		if stream.token.kind == TokenKind.PassKeyword
			stream.grab
			stream.skipBlankLines

		while stream.token.kind <> TokenKind.Dedent
			decl = TypeMemberDeclaration.parse(stream)
			memberDecls.add(decl)
		
		stream.skipBlankLines
		dedent = stream.expect(TokenKind.Dedent)
		typeName = _typeMap[kw.kind]
		return typeName(kw, id, specs, indent, docString, dedent, memberDecls, nil)
	
	var _memberDeclarations as IList<of TypeMemberDeclaration>
	get memberDeclarations from var as IReadOnlyList<of TypeMemberDeclaration>
		"""
		Member declarations made inside this type.  Will not include inherited
		member declarations unless they are overriden in this type.
		"""

	cue init(
		keywordToken as Cobra.Compiler.IToken,
		identifier as Identifier,
		specs as TypeSpecification?,
		docString as DocString?,
		memberDecls as IReadOnlyList<of TypeMemberDeclaration>,
		extraTokens as TokenList?
	)
		require
			keywordToken.kind in TokenKind.typeDeclarationKeywords
		body
			base.init(keywordToken, identifier, docString, nil, extraTokens)
			if docString <> nil, _lastToken = docString.lastToken
			_memberDeclarations = List<of TypeMemberDeclaration>(memberDecls)
			for d in _memberDeclarations
				_addChild(d)
				if d.lastToken.charNum > _lastToken.charNum
					_lastToken = d.lastToken

class IndentedTypeDeclaration
	inherits TypeDeclaration
	is abstract
	"""
	All type declarations except sigs whose definition is not indented
	"""
	
	cue init(
		keywordToken as Cobra.Compiler.IToken,
		identifier as Identifier,
		specs as TypeSpecification?,
		indentToken as Cobra.Compiler.IToken,
		docString as DocString?,
		dedentToken as Cobra.Compiler.IToken,
		memberDecls as IReadOnlyList<of TypeMemberDeclaration>,
		extraTokens as TokenList?
	)
		require
			keywordToken.kind in TokenKind.typeDeclarationKeywords
		body
			base.init(keywordToken, identifier, specs, docString, memberDecls, extraTokens)
			_lastToken = dedentToken
			_indentToken = indentToken
			_dedentToken = dedentToken
	
	get indentToken from var as Cobra.Compiler.IToken
	get dedentToken from var as Cobra.Compiler.IToken

	
	def _toPrettyString as String is override
		sb = StringBuilder(base._toPrettyString)
		sb.append(" : [.childCount] child nodes ")
		return sb.toString

class ClassDeclaration inherits IndentedTypeDeclaration
	"""
	This node repesents a class declaration.
	"""
	invariant
		.keywordToken.kind == TokenKind.ClassKeyword
	
	def parse(stream as ITokenStream) as ClassDeclaration is new, shared
		require
			stream.token.kind == TokenKind.ClassKeyword
		test
			source = "class Foo\n\tpass\n"
			stream = TokenStream(source, "test.cobra")
			c = ClassDeclaration.parse(stream)
			assert c.name == "Foo"
			assert c.dedentToken.charNum > c.indentToken.charNum
			assert c.docString == nil
			assert c.memberDeclarations.count == 0
		test
			source = _
			"class Foo<of Bar, Baz>\n" +
				'\t"""\n' +
				'\tThis is a doc string!\n' +
				'\t"""\n' +
				'\tpass\n'
			stream = TokenStream(source, "test.cobra")
			c = ClassDeclaration.parse(stream)
			assert c.name == "Foo<of Bar, Baz>"
			genericId = c.identifier to GenericIdentifier
			assert genericId.types.count == 2
			assert genericId.types[0].name == "Bar"
			assert genericId.types[1].name == "Baz"
			assert c.dedentToken.lineNum > c.indentToken.lineNum
			assert c.memberDeclarations.count == 0
			assert c.docString.content == "\tThis is a doc string!\n"
		body
			return TypeDeclaration.parse(stream) to ClassDeclaration

class InterfaceDeclaration inherits IndentedTypeDeclaration
	invariant
		.keywordToken.kind == TokenKind.InterfaceKeyword
	def parse(stream as ITokenStream) as InterfaceDeclaration is new, shared
		require
			stream.token.kind == TokenKind.InterfaceKeyword
		test
			source = "interface Foo\n\tpass\n"
			stream = TokenStream(source, "test.cobra")
			i = InterfaceDeclaration.parse(stream)
			assert i.name == "Foo"
			assert i.dedentToken.charNum > i.indentToken.charNum
			assert i.docString == nil
			assert i.memberDeclarations.count == 0
		body
			return TypeDeclaration.parse(stream) to InterfaceDeclaration