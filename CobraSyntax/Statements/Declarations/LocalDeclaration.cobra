
namespace Venom.CobraSyntax

interface ILocalDeclaration
	"""
	A declaration with only local scope.
	Can be an AnonmyousMethodDeclaration, LocalVariableDeclaration, or ParameterDeclaration
	"""
	pass

class LocalDeclaration
	inherits SyntaxNode
	implements ILocalDeclaration
	is abstract
	"""
	The base class for a declaration with only local scope.
	Can be an AnonmyousMethodDeclaration, LocalVariableDeclaration, or ParameterDeclaration
	"""
	pass

interface INamedLocalDeclaration
	inherits ILocalDeclaration, INamedNode
	"""
	A declaration with only local scope that can be identified by a name.
	Can be an LocalVariableDeclaration, or ParameterDeclaration
	"""

class NamedLocalDeclaration
	inherits LocalDeclaration
	implements INamedLocalDeclaration
	adds NamedBehavior
	is abstract
	"""
	The base class for a declaration with only local scope that can be identified by name.
	Can be a LocalVariableDeclaration or ParameterDeclaration
	"""
	get identifier from var as Identifier

	cue init(id as Identifier)
		base.init(id, nil)
		_identifier = id
		_name = id.name

class LocalVariableDeclaration inherits NamedLocalDeclaration
	"""
	Declares a local variable inside a method
	"""
	def toCobraSource as String is override
		return "TODO"


class ParameterDeclaration inherits NamedLocalDeclaration
	"""
	Declares a local parameter for a method
	"""
	get asKeyword from var as Cobra.Compiler.IToken?
	get modifiers from var as IReadOnlyTokenList
	get typeIdentifier from var as TypeIdentifier?
	get defaultValue from var as IExpression?

	get isVariableLength as bool
		return any for m in _modifiers get m.kind == TokenKind.VariKeyword

	get isOutputOnly as bool
		return any for m in _modifiers get m.kind == TokenKind.OutKeyword

	get isInputAndOutput as bool
		return any for m in _modifiers get m.kind == TokenKind.InOutKeyword

	var _paramModifiers as IReadOnlyList<of String> is shared, readonly = [
		TokenKind.OutKeyword,
		TokenKind.InOutKeyword,
		TokenKind.VariKeyword,
		TokenKind.InKeyword,
	]

	def parse(stream as ITokenStream) as ParameterDeclaration? is new, shared
		test
			source = "x"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.identifier.name == param.name == "x"
			assert param.asKeyword == nil
			assert param.typeIdentifier == nil
			assert param.defaultValue == nil
			assert param.isVariableLength == param.isOutputOnly == param.isInputAndOutput == false
		test
			source = "x as int"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword <> nil
			assert param.typeIdentifier.name == "int"
			assert param.defaultValue == nil
			assert param.isVariableLength == param.isOutputOnly == param.isInputAndOutput == false
		test
			source = "x as int = 5"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword <> nil
			assert param.typeIdentifier.name == "int"
			assert param.defaultValue inherits IntegerLiteral
		test
			source = "x = 5"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword == nil
			assert param.typeIdentifier == nil
			assert param.defaultValue inherits IntegerLiteral
		test
			source = "x as out int"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword <> nil
			assert param.typeIdentifier <> nil
			assert param.defaultValue == nil
			assert param.isOutputOnly == true
			assert param.isVariableLength == param.isInputAndOutput == false
		test
			source = "x as inout int"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.isVariableLength == param.isOutputOnly == false
			assert param.isInputAndOutput == true
		test
			source = ns"x as vari inout int = @[1, 2, 3, 4]"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.defaultValue inherits ArrayLiteral
			assert param.isOutputOnly == false
			assert param.isVariableLength == param.isInputAndOutput == true
		body
			id = Identifier.parse(stream)
			mods = TokenList()

			asKeyword = stream.grabOptional(TokenKind.AsKeyword)
			if asKeyword
				while stream.token.kind in _paramModifiers
					mods.add(stream.grab)
				typeIdentifier = TypeIdentifier.parse(stream) to ?
			
			if stream.grabOptional(TokenKind.AssignmentOperator)
				defaultValue = Expression.parse(stream) to ?
			
			return ParameterDeclaration(id, asKeyword, mods, typeIdentifier, defaultValue)
	
	cue init(
		id as Identifier,
		asKeyword as Cobra.Compiler.IToken?,
		modifiers as TokenList,
		typeIdentifier as TypeIdentifier?,
		defaultValue as IExpression?
	)
		require asKeyword implies typeIdentifier
		base.init(id)
		_identifier = id
		if asKeyword
			_asKeyword = asKeyword
			_lastToken = asKeyword
		_modifiers = TokenList(modifiers)
		if typeIdentifier
			_typeIdentifier = typeIdentifier
			_addChild(typeIdentifier)
		if defaultValue
			_defaultValue = defaultValue
			_addChild(defaultValue)
	
	def toCobraSource as String is override
		test
			source = ns"x as vari inout int = @[1, 2, 3, 4]"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.toCobraSource == source
		body
			sb = StringBuilder(_identifier.name)
			if _asKeyword, sb.append(" as")
			if .isVariableLength, sb.append(" vari")
			if .isOutputOnly, sb.append(" out")
			if .isInputAndOutput, sb.append(" inout")
			if _typeIdentifier, sb.append(" [_typeIdentifier.toCobraSource]")
			if _defaultValue, sb.append(" = [_defaultValue.toCobraSource]")
			return sb.toString

extend Cobra.Compiler.IToken

	def endsMethodSignature as bool
		return .kind == TokenKind.CloseParenthesis or
		.kind == TokenKind.EndOfLine or
		.kind == TokenKind.EndOfFile or
		this is Cobra.Compiler.Token.empty

class MethodSignature inherits SyntaxNode
	"""
	A method signature defines the parameters and return type for a method.
	"""
	get parameterDeclarations from var as IReadOnlyList<of ParameterDeclaration>
	get returnTypeSpecification from var as ExplicitTypeSpecification?

	def parse(stream as ITokenStream) as MethodSignature is new, shared
		test
			source = "x as int, y as int)"
			stream = TokenStream(source, 'test.cobra')
			msig = MethodSignature.parse(stream)
			assert msig.parameterDeclarations.count == 2
			assert msig.returnTypeSpecification == nil
		test
			source = "x as int, y as int) as List<of String>"
			stream = TokenStream(source, 'test.cobra')
			msig = MethodSignature.parse(stream)
			assert msig.returnTypeSpecification <> nil
			assert msig.returnTypeSpecification.identifier.name == "List<of String>"
		body
			params = List<of ParameterDeclaration>()
			while not stream.token.endsMethodSignature
				if params.count <> 0, stream.expect(TokenKind.Comma)
				params.add(ParameterDeclaration.parse(stream))
			closeParens = stream.expect(TokenKind.CloseParenthesis)
			if stream.token.kind == TokenKind.AsKeyword
				returnTypeSpec = ExplicitTypeSpecification.parse(stream) to ?
			return MethodSignature(params, closeParens, returnTypeSpec)
	
	cue init(
		params as ParameterDeclaration*,
		closeParens as Cobra.Compiler.IToken,
		returnTypeSpec as ExplicitTypeSpecification?
	)
		base.init
		_parameterDeclarations = List<of ParameterDeclaration>(params)
		if _parameterDeclarations.count == 0, _firstToken = closeParens
		else
			_firstToken = _parameterDeclarations[0].firstToken
			for p in _parameterDeclarations, _addChild(p)
			
		_lastToken = closeParens
		if returnTypeSpec <> nil
			_returnTypeSpecification = returnTypeSpec
			_addChild(returnTypeSpec)
	
	def toCobraSource as String is override
		test
			source = "x as int, y as int) as List<of String>"
			stream = TokenStream(source, 'test.cobra')
			msig = MethodSignature.parse(stream)
			assert msig.toCobraSource == source
		body
			sb = StringBuilder()
			for param in _parameterDeclarations
				if sb.length <> 0, sb.append(", ")
				sb.append(param.toCobraSource)
			sb.append(")")
			if _returnTypeSpecification <> nil
				sb.append(" [_returnTypeSpecification.toCobraSource]")
			return sb.toString