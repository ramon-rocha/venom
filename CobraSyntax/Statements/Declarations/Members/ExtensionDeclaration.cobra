
namespace Venom.CobraSyntax

class ExtensionDeclaration
	inherits MemberDeclaration
	implements INamespaceMemberDeclaration
	"""
	The syntax for a declaration that extends an existng type.
	"""

	invariant
		_identifier inherits TypeIdentifier

	get extendedTypeIdentifier as TypeIdentifier
		return _identifier to TypeIdentifier
	
	get memberDeclarations from var as IReadOnlyList<of ITypeMemberDeclaration>

	def parse(stream as ITokenStream) as ExtensionDeclaration is shared, new
		require
			stream.token.kind == TokenKind.ExtendKeyword
		test
			source =
			"extend System.String\n" +
			"    def double as String\n" +
			"        return this + this"
			stream = TokenStream(source, 'test.cobra')
			ext = ExtensionDeclaration.parse(stream)
			assert ext.extendedTypeIdentifier.qualifiedName == "System.String"
			assert not ext.hasDocString
			assert ext.memberDeclarations.count == 1
			assert ext.memberDeclarations[0] implements IMethodDeclaration
		body
			kw = stream.expect(TokenKind.ExtendKeyword)
			id = TypeIdentifier.parse(stream)
			stream.skipBlankLines

			indent = stream.expect(TokenKind.Indent)

			if stream.token.startsDocString
				docString = DocString.parse(stream) to ?
				stream.skipBlankLines

			decls = List<of ITypeMemberDeclaration>()
			while not stream.token.endsBlock
				decls.add(TypeMemberDeclaration.parse(stream))
				stream.skipBlankLines

			dedent = stream.expect(TokenKind.Dedent)

			return ExtensionDeclaration(kw, id, indent, docString, dedent, decls)


	cue init(
		keywordToken as Cobra.Compiler.IToken,
		identifier as TypeIdentifier,
		indentToken as Cobra.Compiler.IToken?,
		docString as DocString?,
		dedentToken as Cobra.Compiler.IToken?,
		memberDecls as ITypeMemberDeclaration*
	)
		base.init(keywordToken, identifier, indentToken, docString, dedentToken, nil, nil)
		_memberDeclarations = List<of ITypeMemberDeclaration>(memberDecls)
		for m in _memberDeclarations, _addChild(m)
