
namespace Venom.CobraSyntax

interface IMethodDeclaration
	inherits ITypeMemberDeclaration

	get signature as MethodSignature?
	get specification as ISpecifications
	get body as MethodBody

class BaseMethodDeclaration
	inherits TypeMemberDeclaration
	implements IMethodDeclaration
	is abstract

	get signature from var as MethodSignature?
	get specification from var as ISpecifications
	get body from var as MethodBody

	var _typeMap as IReadOnlyDictionary<of String, Type> is shared, readonly = {
		TokenKind.MethodKeyword : MethodDeclaration,
		TokenKind.CueKeyword : CueDeclaration
	}

	def _parse(stream as ITokenStream, expectedKind as String) as IMethodDeclaration is shared
		require
			expectedKind in _typeMap.keys
			stream.token.kind == expectedKind
		body
			kwToken = stream.expect(expectedKind)
			id = Identifier.parse(stream)
			if id.firstToken.kind == TokenKind.CallStart
				signature = MethodSignature.parse(stream) to ?

			stream.skipBlankLines
			specs = Specifications.parse(stream)
			stream.skipBlankLines
			if specs.isIndented
				indent = specs.indentToken
			else
				indent = stream.grabOptional(TokenKind.Indent)
				stream.skipBlankLines
			
			if stream.token.startsDocString
				docString = DocString.parse(stream)
				stream.skipBlankLines
			
			methodBody = MethodBody.parse(stream)
	
			stream.skipBlankLines
			dedent = stream.expect(TokenKind.Dedent)
			typ = _typeMap[expectedKind]
			return typ(kwToken, id, signature, specs, indent, docString, dedent, methodBody, nil)

	cue init(
		kwToken as Cobra.Compiler.IToken,
		identifier as Identifier,
		signature as MethodSignature?,
		specs as ISpecifications,
		indent as Cobra.Compiler.IToken?,
		docString as DocString?,
		dedent as Cobra.Compiler.IToken?,
		methodBody as MethodBody,
		extraTokens as TokenList?
	)
		require kwToken.which in _typeMap.keys
		base.init(kwToken, identifier, indent, docString, dedent, nil, extraTokens)
		_specification = specs
		if signature <> nil
			_signature = signature
			_addChild(signature)
		_body = methodBody
		_addChild(methodBody)

class MethodDeclaration inherits BaseMethodDeclaration
	
	def parse(stream as ITokenStream) as MethodDeclaration is new, shared
		require
			stream.token.kind == TokenKind.MethodKeyword
		test
			source = "def foo\n\tpass\n"
			stream = TokenStream(source, "test.cobra")
			m = MethodDeclaration.parse(stream)
			assert m.name == "foo"
			assert m.signature == nil
			assert m.dedentToken.charNum > m.indentToken.charNum
			assert m.body.bodyKeyword == nil
			assert m.body.statements.count == 1
			assert m.body.statements.first inherits PassStatement
			assert m.docString == nil
		test
			source =
			'def binOp(x as int, y as int) as int\n' +
			'    """Does op on x and y"""\n' +
			'    return .op(x, y)'
			stream = TokenStream(source, "test.cobra")
			m = MethodDeclaration.parse(stream)
			assert m.name == "binOp"
			assert m.indentToken and m.dedentToken
			assert m.indentToken <> m.dedentToken
			assert m.lastToken == m.dedentToken
			assert m.docString.content == "Does op on x and y"
			assert m.body.statements.count == 1
			assert m.body.statements[0] inherits ReturnStatement
			assert m.signature.parameterDeclarations.count == 2
			assert m.signature.returnTypeSpecification <> nil
			assert m.signature.returnTypeSpecification.identifier.name == "int"
		body
			return _parse(stream, TokenKind.MethodKeyword) to MethodDeclaration

class MethodBody
	inherits SyntaxNode
	adds StatementContainerBehavior

	get bodyKeyword from var as Cobra.Compiler.IToken?

	cue init(
		bodyKeyword as Cobra.Compiler.IToken?,
		statements as IStatement*
	)
		base.init
		stmts = StatementList(statements)
		if bodyKeyword <> nil
			_firstToken = bodyKeyword
		else
			_firstToken = stmts.first.firstToken
		_lastToken = stmts.last.lastToken
		_clause = StatementClause(_firstToken, _lastToken, stmts)
		_addChild(_clause)
	
	def parse(stream as ITokenStream) as MethodBody is new, shared
		bodyKeyword = stream.grabOptional(TokenKind.BodyKeyword)
		if bodyKeyword <> nil
			stream.skipBlankLines
			stream.expect(TokenKind.Indent)
		
		stmts = StatementList()
		while not stream.token.endsBlock
			stmts.add(Statement.parse(stream))
			stream.skipBlankLines

		return MethodBody(bodyKeyword, stmts)

	def toCobraSource as String is override
		return "TODO"