
namespace Venom.CobraSyntax

extend Cobra.Compiler.IToken

	def endsMethodSignature as bool
		return .kind == TokenKind.CloseParenthesis or
		.kind == TokenKind.EndOfLine or
		.kind == TokenKind.EndOfFile or
		this is Cobra.Compiler.Token.empty

class MethodSignature inherits SyntaxNode
	"""
	A method signature defines the parameters and return type for a method.
	"""
	get parameterDeclarations from var as IReadOnlyList<of ParameterDeclaration>
	get returnTypeSpecification from var as ExplicitTypeSpecification?

	def parse(stream as ITokenStream) as MethodSignature is new, shared
		test without_return_type
			source = "x as int, y as int)"
			stream = TokenStream(source, 'test.cobra')
			msig = MethodSignature.parse(stream)
			assert msig.parameterDeclarations.count == 2
			assert msig.returnTypeSpecification == nil
			assert msig.firstToken.text == "x"
			assert msig.lastToken.text == ")"
		test is_space_agnostic
			source =
			"    x as int,\n" +
			"    y as int\n" +
			")"
			stream = TokenStream(source, 'test.cobra')
			msig = MethodSignature.parse(stream)
			assert msig.parameterDeclarations.count == 2
			assert msig.returnTypeSpecification == nil
			assert msig.firstToken.text == "x"
			assert msig.firstToken.lineNum == 1
			assert msig.lastToken.text == ")"
			assert msig.lastToken.lineNum == 3
		test with_return_type
			source = "x as int, y as int) as List<of String>"
			stream = TokenStream(source, 'test.cobra')
			msig = MethodSignature.parse(stream)
			assert msig.returnTypeSpecification <> nil
			assert msig.returnTypeSpecification.identifier.name == "List<of String>"
			assert msig.firstToken.text == "x"
			assert msig.lastToken.text == ">"
		test without_params
			source = "as String"
			stream = TokenStream(source, 'test.cobra')
			msig = MethodSignature.parse(stream)
			assert msig.parameterDeclarations.count == 0
			assert msig.returnTypeSpecification <> nil
			assert msig.returnTypeSpecification.identifier.name == "String"
			assert msig.firstToken.text == "as"
			assert msig.lastToken.text == "String"
		body
			if not stream implements IWhitespaceAgnosticTokenStream
				stream = WhitespaceAgnosticTokenStreamWrapper(stream)
			
			params = List<of ParameterDeclaration>()
			if stream.token.kind == TokenKind.AsKeyword
				returnTypeSpec = ExplicitTypeSpecification.parse(stream) to ?
			else
				while not stream.token.endsMethodSignature
					if params.count <> 0, stream.expect(TokenKind.Comma)
					params.add(ParameterDeclaration.parse(stream))
				closeParens = stream.expect(TokenKind.CloseParenthesis) to ?
				if stream.token.kind == TokenKind.AsKeyword
					returnTypeSpec = ExplicitTypeSpecification.parse(stream) to ?
			
			return MethodSignature(params, closeParens, returnTypeSpec)
	
	cue init(
		params as ParameterDeclaration*,
		closeParens as Cobra.Compiler.IToken?,
		returnTypeSpec as ExplicitTypeSpecification?
	)
		require closeParens <> nil or returnTypeSpec <> nil
		base.init
		_parameterDeclarations = List<of ParameterDeclaration>(params)
		if _parameterDeclarations.count <> 0
			_firstToken = _parameterDeclarations[0].firstToken
			for p in _parameterDeclarations, _addChild(p)
		else
			if closeParens <> nil
				_firstToken = closeParens
			else if returnTypeSpec <> nil
				_firstToken = returnTypeSpec.asKeyword
		
		if returnTypeSpec <> nil
			_returnTypeSpecification = returnTypeSpec
			_addChild(returnTypeSpec)
			assert _lastToken == returnTypeSpec.lastToken
		else if closeParens <> nil
			_lastToken = closeParens
		else
			throw FallThroughException("Could not determine _lastToken")

interface IMethodDeclaration
	inherits ITypeMemberDeclaration

	get signature as MethodSignature?
	get specification as ISpecifications
	get requireContract as RequireDeclaration?
	get ensureContract as EnsureDeclaration?
	get tests as IReadOnlyList<of TestDeclaration>
	get body as MethodBody

class BaseMethodDeclaration
	inherits TypeMemberDeclaration
	implements IMethodDeclaration
	is abstract
	"""
	The base class for method and cue declarations (but not get or set accessors)
	"""

	get signature from var as MethodSignature?
	get specification from var as ISpecifications
	get requireContract from var as RequireDeclaration?
	get ensureContract from var as EnsureDeclaration?
	get tests from var as IReadOnlyList<of TestDeclaration>
	get body from var as MethodBody

	var _typeMap as IReadOnlyDictionary<of String, Type> is shared, readonly = {
		TokenKind.MethodKeyword : MethodDeclaration,
		TokenKind.CueKeyword : CueDeclaration
	}

	def _parse(stream as ITokenStream, expectedKind as String) as IMethodDeclaration is shared
		require
			expectedKind in _typeMap.keys
			stream.token.kind == expectedKind
		body
			kwToken = stream.expect(expectedKind)
			id = Identifier.parse(stream)
			if id.firstToken.kind == TokenKind.CallStart _
			or stream.token.kind == TokenKind.AsKeyword
				signature = MethodSignature.parse(stream) to ?

			stream.skipBlankLines
			specs = Specifications.parse(stream)
			stream.skipBlankLines
			if specs.isIndented
				indent = specs.indentToken
			else
				indent = stream.grabOptional(TokenKind.Indent)
				stream.skipBlankLines
			
			if stream.token.startsDocString
				docString = DocString.parse(stream)
				stream.skipBlankLines
			
			if stream.token.kind == TokenKind.RequireKeyword _
			or stream.token.kind == TokenKind.LogicalOrOperator and stream.peek.kind == TokenKind.RequireKeyword
				req = RequireDeclaration.parse(stream) to ?
				stream.skipBlankLines

			if stream.token.kind == TokenKind.EnsureKeyword _
			or stream.token.kind == TokenKind.LogicalAndOperator and stream.peek.kind == TokenKind.EnsureKeyword
				ens = EnsureDeclaration.parse(stream) to ?
				stream.skipBlankLines

			tests = List<of TestDeclaration>()
			while stream.token.kind == TokenKind.TestKeyword
				tests.add(TestDeclaration.parse(stream))
				stream.skipBlankLines

			methodBody = MethodBody.parse(stream)
	
			stream.skipBlankLines
			dedent = stream.expect(TokenKind.Dedent)
			typ = _typeMap[expectedKind]
			return typ(kwToken, id, signature, specs, indent, docString, req, ens, tests, methodBody, dedent, nil)

	cue init(
		kwToken as Cobra.Compiler.IToken,
		identifier as Identifier,
		signature as MethodSignature?,
		specs as ISpecifications,
		indent as Cobra.Compiler.IToken?,
		docString as DocString?,
		reqContract as RequireDeclaration?,
		ensContract as EnsureDeclaration?,
		tests as TestDeclaration*,
		methodBody as MethodBody,
		dedent as Cobra.Compiler.IToken?,
		extraTokens as TokenList?
	)
		require kwToken.which in _typeMap.keys
		base.init(kwToken, identifier, indent, docString, dedent, nil, extraTokens)
		_specification = specs
		_addChild(specs)
		if reqContract <> nil
			_requireContract = reqContract
			_addChild(reqContract)
		if ensContract <> nil
			_ensureContract = ensContract
			_addChild(ensContract)
		if signature <> nil
			_signature = signature
			_addChild(signature)
		_tests = List<of TestDeclaration>(tests)
		for t in tests, _addChild(t)
		_body = methodBody
		_addChild(methodBody)

class MethodDeclaration inherits BaseMethodDeclaration
	
	def parse(stream as ITokenStream) as MethodDeclaration is new, shared
		require
			stream.token.kind == TokenKind.MethodKeyword
		test
			source =
			"def foo\n" +
			"    pass"
			stream = TokenStream(source, "test.cobra")
			m = MethodDeclaration.parse(stream)
			assert m.name == "foo"
			assert m.signature == nil
			assert m.dedentToken.charNum > m.indentToken.charNum
			assert m.tests.count == 0
			assert m.body.bodyKeyword == nil
			assert m.body.statements.count == 1
			assert m.body.statements.first inherits PassStatement
			assert m.docString == nil
		test
			source =
			"def foo\n" +
			"    body\n" +
			"        pass"
			stream = TokenStream(source, "test.cobra")
			m = MethodDeclaration.parse(stream)
			assert m.name == "foo"
			assert m.signature == nil
			assert m.dedentToken.charNum > m.indentToken.charNum
			assert m.body.bodyKeyword <> nil
			assert m.body.statements.count == 1
			assert m.body.statements.first inherits PassStatement
			assert m.docString == nil
		test
			source =
			"def foo as Bar\n" +
			"    return Bar()"
			stream = TokenStream(source, "test.cobra")
			m = MethodDeclaration.parse(stream)
			assert m.signature <> nil
			assert m.signature.parameterDeclarations.count == 0
			assert m.signature.returnTypeSpecification.identifier.name == "Bar"
		test
			source =
			'def binOp(x as int, y as int) as int\n' +
			'    """Does op on x and y"""\n' +
			'    return .op(x, y)'
			stream = TokenStream(source, "test.cobra")
			m = MethodDeclaration.parse(stream)
			assert m.name == "binOp"
			assert m.indentToken and m.dedentToken
			assert m.indentToken <> m.dedentToken
			assert m.lastToken == m.dedentToken
			assert m.docString.content == "Does op on x and y"
			assert m.body.statements.count == 1
			assert m.body.statements[0] inherits ReturnStatement
			assert m.signature.parameterDeclarations.count == 2
			assert m.signature.returnTypeSpecification <> nil
			assert m.signature.returnTypeSpecification.identifier.name == "int"
		test tests
			source =
			'def binOp(x as int, y as int) as int is shared\n' +
			'    """Does op on x and y"""\n' +
			'    require x > 0\n' +
			'    ensure\n' +
			'        y < 0 implies result > 0\n' +
			'        y == 0 implies result == 0\n' +
			'    test\n' +
			'        assert .op(1, 2) == 3\n' +
			'    test\n' +
			'        assert .op(4, 5) == 6\n' +
			'    body\n' +
			'        return .op(x, y)'
			stream = TokenStream(source, "test.cobra")
			m = MethodDeclaration.parse(stream)
			assert m.lastToken == m.dedentToken
			assert m.docString.content == "Does op on x and y"
			assert m.requireContract <> nil and m.requireContract.indent == nil
			assert m.ensureContract <> nil and m.ensureContract.expressions.count == 2
			assert m.tests.count == 2
			assert m.body.bodyKeyword <> nil
			assert m.body.statements.count == 1
			assert stream.token.isEOF
		body
			return _parse(stream, TokenKind.MethodKeyword) to MethodDeclaration

class MethodBody
	inherits SyntaxNode
	adds StatementContainerBehavior

	get bodyKeyword from var as Cobra.Compiler.IToken?

	def parse(stream as ITokenStream) as MethodBody is new, shared
		bodyKeyword = stream.grabOptional(TokenKind.BodyKeyword)
		if bodyKeyword <> nil
			stream.skipBlankLines
			indent = stream.expect(TokenKind.Indent) to ?
		stmts = StatementList.parse(stream)
		if indent <> nil, stream.expect(TokenKind.Dedent)
		return MethodBody(bodyKeyword, stmts)

	cue init(bodyKeyword as Cobra.Compiler.IToken?, statements as IStatement*)
		require bodyKeyword implies bodyKeyword.kind == TokenKind.BodyKeyword
		base.init
		stmts = StatementList(statements)
		if bodyKeyword <> nil
			_bodyKeyword = _firstToken = bodyKeyword
		else if stmts.count > 0
			_firstToken = stmts.first.firstToken
		else
			_firstToken = Cobra.Compiler.Token.empty
		if stmts.count > 0
			_lastToken = stmts.last.lastToken
		else
			_lastToken = _firstToken
		_clause = StatementClause(_firstToken, _lastToken, stmts)
		_addChild(_clause)