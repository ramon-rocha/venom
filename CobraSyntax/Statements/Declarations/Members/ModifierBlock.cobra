
namespace Venom.CobraSyntax

class ModifierBlock inherits Statement implements ITypeMemberDeclaration
	"""
	A block that applies access modifiers or "is names" to all indented members
	"""

	#region unused
	# TODO: how can we refactor so we don't need these bogus properties?
	get identifier from var as Identifier
		"""
		Modifier blocks cannot be identified by an identifier,
		but this is part of the ITypeMemberDeclaration interface
		"""
	
	get name as String
		return _identifier.name

	get isUnderscored as bool
		return false

	get isPascalCased as bool
		return false

	get isCamelCased as bool
		return false

	get docString as DocString?
		return nil
	#endregion unused
	
	get modifiers from var as IReadOnlyTokenList
	get commas from var as IReadOnlyTokenList

	invariant
		_firstToken.kind in TokenKind.modifierKeywords
		.modifiers.count == .commas.count + 1
		_lastToken.kind == TokenKind.Dedent
	get indent from var as Cobra.Compiler.IToken
	get declarations from var as IReadOnlyList<of ITypeMemberDeclaration>
	get dedent as Cobra.Compiler.IToken
		return _lastToken

	def parse(stream as ITokenStream) as ModifierBlock is new, shared
		require
			stream.token.kind in TokenKind.modifierKeywords
		test
			source =
			"shared\n" +
			"    var cache = Dictionary<of String, String>()"
			stream = TokenStream(source, 'test.cobra')
			modBlock = ModifierBlock.parse(stream)
			assert modBlock.modifiers.count == 1
			assert modBlock.modifiers[0].kind == TokenKind.SharedKeyword
			assert modBlock.declarations.count == 1
			assert modBlock.declarations[0] inherits FieldDeclaration
		test
			source =
			"shared, readonly\n" +
			ns"    var foo = [1, 2, 3]\n" +
			ns"    var bar = [4, 5, 6]"
			stream = TokenStream(source, 'test.cobra')
			modBlock = ModifierBlock.parse(stream)
			assert modBlock.modifiers.count == 2
			assert modBlock.modifiers[0].kind == TokenKind.SharedKeyword
			assert modBlock.modifiers[1].kind == TokenKind.ReadOnlyKeyword
			assert modBlock.declarations.count == 2
			assert modBlock.declarations[0] inherits FieldDeclaration
			assert modBlock.declarations[1] inherits FieldDeclaration
		body
			mods = TokenList()
			commas = TokenList()

			m = stream.grabOneOf(TokenKind.modifierKeywords) to ?
			mods.add(m)
			while stream.token.kind == TokenKind.Comma
				commas.add(stream.grab)
				m = stream.grabOneOfOptional(TokenKind.modifierKeywords)
				if m, mods.add(m)
				else, break

			skipped = stream.skipToNextLine
			stream.skipBlankLines
			indent = stream.expect(TokenKind.Indent)
			decls = List<of ITypeMemberDeclaration>()
			while not stream.token.endsBlock
				decls.add(TypeMemberDeclaration.parse(stream))
				stream.skipBlankLines
			dedent = stream.expect(TokenKind.Dedent)
			
			return ModifierBlock(mods, commas, indent, decls, dedent, skipped)

	cue init(
		modifiers as IList<of Cobra.Compiler.IToken>,
		commas as IList<of Cobra.Compiler.IToken>,
		indent as Cobra.Compiler.IToken,
		decls as ITypeMemberDeclaration*,
		dedent as Cobra.Compiler.IToken,
		skipped as TokenList
	)
		require modifiers.count > 0
		base.init(modifiers[0], dedent, skipped)
		_identifier = Identifier(_firstToken.copy(TokenKind.Identifier, ""))
		_modifiers = TokenList(modifiers)
		_commas = TokenList(commas)
		_indent = indent
		_declarations = List<of ITypeMemberDeclaration>(decls)
		for d in decls, _addChild(d)
