
namespace Venom.CobraSyntax

class ExpressionStatement
	inherits Expression
	adds StatementBehavior
	implements IExpression, IStatement

	invariant
		.isSpaceAgnostic == .expression.isSpaceAgnostic

	get expression from var as IExpression

	def parse(stream as ITokenStream) as IStatement is new, shared
		test
			source = "text = File.readAllText('foo.txt')"
			stream = TokenStream(source, 'test.cobra')

			stmt = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt.extraTokens.count == 0

			assign = stmt.expression to AssignmentExpression
			left = assign.leftExpression to IdentifierExpression
			assert left.identifier.name == 'text'

			right = assign.rightExpression to MemberAccessExpression
			idExpr = right.leftExpression to IdentifierExpression
			assert idExpr.identifier.name == 'File'

			member = right.rightExpression to CallExpression
			assert member.identifier.name == 'readAllText'
			assert member.arguments.count == 1
			assert member.arguments[0] inherits StringLiteral
			assert member.lastToken.kind == TokenKind.CallEnd

		test hangingIndent
			# make sure space agnostic expressions with leftover dedents don't mess up following statements
			source =
			"weekdays = {\n" +
			"       'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'\n" +
			"    }\n" +
			"\n" +
			"weekends = {\n" +
			"    'Saturday', 'Sunday'\n" +
			"    }"
			stream = TokenStream(source, 'test.cobra')
			
			stmt1 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt1.extraTokens.count == 0
			expr1 = stmt1.expression to AssignmentExpression
			assert expr1.rightExpression inherits SetLiteral
			
			stmt2 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt2.extraTokens.count == 0
			expr2 = stmt2.expression to AssignmentExpression
			assert expr2.rightExpression inherits SetLiteral
		
		test spaceAgnosticDedent
			# handle leftover indents
			source =
			"    weekdays = {\n" +
			"'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'\n" +
			"}\n" +
			"\n" +
			"    weekends = {\n" +
			"'Saturday', 'Sunday'\n" +
			"}"
			stream = TokenStream(source, 'test.cobra')
			stream.grab

			stmt1 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt1.extraTokens.count == 0
			expr1 = stmt1.expression to AssignmentExpression
			assert expr1.rightExpression inherits SetLiteral

			stmt2 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt2.extraTokens.count == 0
			expr2 = stmt2.expression to AssignmentExpression
			assert expr2.rightExpression inherits SetLiteral
		body
			indentLevel = stream.indentLevel
			expr = Expression.parse(stream)

			#region TODO this should be in a separate method, maybe Expression.parse
			comma = stream.grabOptional(TokenKind.Comma)
			if comma <> nil
				# a, b, c = 1, 2, 3
				# p1, p2, p3 = for p in triangle.points get p
				exprs = CommaSeparatedExpressions.parse(stream, TokenKind.AssignmentOperator)
				leftExpressions = ExpressionList(exprs.expressions)
				leftExpressions.insert(0, expr)
				assignToken = stream.expect(TokenKind.AssignmentOperator)
				rightExpressions = CommaSeparatedExpressions.parse(stream, TokenKind.EndOfLine).expressions
				trace for e in leftExpressions get (e to IdentifierExpression).name, assignToken, for e in rightExpressions get (e to IdentifierExpression).name
			#endregion

			skipped = stream.skipTo(TokenKind.EndOfLine)
			lastToken = skipped.last
			skipped.remove(lastToken)

			if expr.isSpaceAgnostic
				howMany = Math.abs(indentLevel - stream.indentLevel)
				whitespaceKind = if(indentLevel > stream.indentLevel, TokenKind.Indent, TokenKind.Dedent)
				stream.skipBlankLines
				for i in howMany, stream.expect(whitespaceKind)

			return ExpressionStatement(expr, lastToken, skipped)

	cue init(expr as IExpression, lastToken as Cobra.Compiler.IToken, extraTokens as TokenList?)
		ensure expr in _children
		base.init(expr, extraTokens)
		_expression = expr
		_isSpaceAgnostic = expr.isSpaceAgnostic
		if lastToken.charNum > _lastToken.charNum
			_lastToken = lastToken