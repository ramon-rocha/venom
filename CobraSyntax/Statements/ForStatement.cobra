
namespace Venom.CobraSyntax

class ForStatement inherits Statement
	
	get forKeyword from var as Cobra.Compiler.IToken
	get loopVar from var as IdentifierExpression
	get inKeyword from var as Cobra.Compiler.IToken
	get startExpression from var as IExpression?
	get colon1 from var as Cobra.Compiler.IToken?
	get stopExpression from var as IExpression
	get colon2 from var as Cobra.Compiler.IToken?
	get stepExpression from var as IExpression?
	get clause from var as StatementClause

	invariant
		.colon1 <> nil implies .startExpression <> nil
		.startExpression <> nil implies .colon1 <> nil
		.stepExpression <> nil implies .colon2 <> nil
		.colon2 <> nil implies .stepExpression <> nil

	def parse(stream as ITokenStream) as ForStatement is new, shared
		require
			stream.token.kind == TokenKind.ForKeyword
		test
			source = "for i in 5, print i"
			stream = TokenStream(source, 'test.cobra')
			stmt = ForStatement.parse(stream)
			assert stmt.loopVar.name == "i"
			assert stmt.loopVar.typeClause == nil
			assert stmt.startExpression == nil
			assert stmt.colon1 == nil
			assert stmt.stopExpression inherits IntegerLiteral
			assert stmt.colon2 == nil
			assert stmt.stepExpression == nil
			assert stmt.clause.statements.count == 1
			assert stmt.lastToken == stmt.lastToken
		test
			source =
			"for i in 1:10\n" +
			"    print i"
			stream = TokenStream(source, 'test.cobra')
			stmt = ForStatement.parse(stream)
			assert stmt.startExpression inherits IntegerLiteral
			assert stmt.colon1 <> nil
			assert stmt.stopExpression inherits IntegerLiteral
			assert stmt.colon2 == nil
			assert stmt.stepExpression == nil
			assert stmt.clause.statements.count == 1
			assert stmt.lastToken == stmt.lastToken
		test
			source =
			"for i in -10:10:2\n" +
			"    print i"
			stream = TokenStream(source, 'test.cobra')
			stmt = ForStatement.parse(stream)
			assert stmt.startExpression inherits AdditiveInverseExpression
			assert stmt.colon1 <> nil
			assert stmt.stopExpression inherits IntegerLiteral
			assert stmt.colon2 <> nil
			assert stmt.stepExpression inherits IntegerLiteral
		test
			source =
			"for x as number in {0.5, 1.0, 1.5, 2.0}\n" +
			"\tprint x + 0.5\n"
			stream = TokenStream(source, 'test.cobra')
			stmt = ForStatement.parse(stream)
			assert stmt.loopVar.name == "x"
			assert stmt.loopVar.typeClause.typeIdentifier.name == "number"
			assert stmt.stopExpression inherits SetLiteral
			assert stmt.toCobraSource == source
		body
			forKeyword = stream.expect(TokenKind.ForKeyword)
			loopVar = IdentifierExpression.parse(stream)
			inKeyword = stream.expect(TokenKind.InKeyword)

			expr = Expression.parse(stream)
			colon1 = stream.grabOptional(TokenKind.Colon)
			if colon1
				startExpr as IExpression? = expr
				stopExpr = Expression.parse(stream)
			else
				stopExpr = expr
			colon2 = stream.grabOptional(TokenKind.Colon)
			if colon2
				stepExpr = Expression.parse(stream) to ?

			if stream.token.kind <> TokenKind.Comma
				skipped = stream.skipToNextLine
			else
				skipped = TokenList()
			clause = StatementClause.parse(stream)
			return ForStatement(forKeyword, loopVar, inKeyword, startExpr, colon1, stopExpr, colon2, stepExpr, clause, skipped)

	cue init(
		forKeyword as Cobra.Compiler.IToken,
		loopVar as IdentifierExpression,
		inKeyword as Cobra.Compiler.IToken,
		startExpression as IExpression?,
		colon1 as Cobra.Compiler.IToken?,
		stopExpression as IExpression,
		colon2 as Cobra.Compiler.IToken?,
		stepExpression as IExpression?,
		clause as StatementClause,
		skipped as TokenList
	)
		base.init(forKeyword, clause.lastToken, skipped)
		_forKeyword, _inKeyword = forKeyword, inKeyword
		_loopVar = loopVar
		_addChild(loopVar)
		if startExpression
			_startExpression, _colon1 = startExpression, colon1 to !
			_addChild(startExpression)
		_stopExpression = stopExpression
		_addChild(stopExpression)
		if stepExpression
			_stepExpression, _colon2 = stepExpression, colon2 to !
			_addChild(stepExpression)
		_clause = clause
		_addChild(clause)

	def toCobraSource as String is override
		sb = StringBuilder("for [_loopVar.toCobraSource] in ")
		if _colon1
			sb.append(_startExpression.toCobraSource)
			sb.append(":")
		sb.append(_stopExpression.toCobraSource)
		if _colon2
			sb.append(":")
			sb.append(_stepExpression.toCobraSource)
		stmtsSource = _clause.toCobraSource
		if stmtsSource.startsWith(",")
			sb.append(stmtsSource)
		else
			sb.appendLine
			for line in stmtsSource.splitLines
				sb.appendLine("\t[line]")
		return sb.toString
