
namespace Venom.CobraSyntax

class IfStatement inherits Statement
	
	get ifKeyword from var as Cobra.Compiler.IToken
	get condition from var as IExpression
	get trueClause from var as StatementClause
	get falseClause from var as ElseClause?

	def parse(stream as ITokenStream) as IfStatement is new, shared
		require
			stream.token.kind == TokenKind.IfKeyword
		test
			source = ns"if name, print 'Hello, [name]'"
			stream = TokenStream(source, 'test.cobra')
			stmt = IfStatement.parse(stream)
			assert stmt.condition inherits IdentifierExpression
			assert stmt.trueClause.statements.count == 1
			assert stmt.trueClause.statements[0] inherits PrintStatement
			assert stmt.falseClause == nil
		test
			source = _
			"if name\n" +
			ns"    print 'Hello, [name]'\n"
			stream = TokenStream(source, 'test.cobra')
			stmt = IfStatement.parse(stream)
			assert stmt.condition inherits IdentifierExpression
			assert stmt.trueClause.statements.count == 1
			assert stmt.trueClause.statements[0] inherits PrintStatement
			assert stmt.falseClause == nil
		test
			source = _
			ns"if name, print 'Hello, [name]'\n" +
			'else, print "I don\'t know your name"'
			stream = TokenStream(source, 'test.cobra')
			stmt = IfStatement.parse(stream)
			assert stmt.falseClause <> nil
			assert stmt.falseClause.statements.count == 1
			assert stmt.falseClause.statements[0] inherits PrintStatement
		test
			source = _
			"if name\n" +
			ns"    print 'Hello, [name]'\n" +
			"else\n" +
			'    print "I don\'t know your name"'
			stream = TokenStream(source, 'test.cobra')
			stmt = IfStatement.parse(stream)
			assert stmt.falseClause <> nil
			assert stmt.falseClause.statements.count == 1
			assert stmt.falseClause.statements[0] inherits PrintStatement
		test
			source = _
			"if x < y\n" +
			"    print 'x is smaller'\n" +
			"else if x > y\n" +
			"    print 'x is larger'\n" +
			"    print 'this statement is not included as part of the elseIfClause's statements\n" +
			"else\n" +
			"    print 'x and y are the same'"
			stream = TokenStream(source, 'test.cobra')
			stmt = IfStatement.parse(stream)
			assert stmt.condition inherits LessThanExpression
			assert stmt.falseClause <> nil
			assert stmt.falseClause.statements.count == 1
			assert stmt.falseClause.statements[0] inherits IfStatement
			assert stmt.lastToken is stmt.falseClause.statements[0].lastToken
		body
			ifKeyword = stream.expect(TokenKind.IfKeyword)
			condition = Expression.parse(stream)
			skippedTokens = TokenList()

			if not stream.token.kind == TokenKind.Comma
				skippedTokens.addRange(stream.skipToNextLine)
				stream.skipBlankLines

			trueClause = StatementClause.parse(stream)
			stream.skipBlankLines

			if stream.token.kind == TokenKind.ElseKeyword
				falseClause = ElseClause.parse(stream)

			return IfStatement(ifKeyword, condition, trueClause, falseClause, skippedTokens)

	cue init(
		ifKeyword as Cobra.Compiler.IToken,
		condition as IExpression,
		trueClause as StatementClause,
		falseClause as ElseClause?,
		extraTokens as TokenList
	)
		base.init(ifKeyword, extraTokens)
		_ifKeyword = ifKeyword
		_condition = condition
		_addChild(_condition)
		_trueClause = trueClause
		_addChild(trueClause)
		if falseClause <> nil
			_falseClause = falseClause
			_addChild(falseClause)

	def toCobraSource as String is override
		sb = StringBuilder("if ")
		sb.append(_condition.toCobraSource)
		sb.append(_trueClause.toCobraSource)
		if _falseClause, sb.append(_falseClause.toCobraSource)
		return sb.toString


class ElseClause inherits StatementClause
	
	get elseKeyword as Cobra.Compiler.IToken
		return _firstToken
	
	get ifStatement from var as IfStatement?

	var _clause as StatementClause?

	get statements as IReadOnlyList<of IStatement> is override
		if _clause <> nil, return _clause.statements
		return _statements

	invariant
		.ifStatement implies _clause == nil and _statements.count == 1
		_clause implies .ifStatement == nil

	def parse(stream as ITokenStream) as ElseClause is new, shared
		require
			stream.token.kind == TokenKind.ElseKeyword
		body
			elseKeyword = stream.expect(TokenKind.ElseKeyword)

			if stream.token.kind == TokenKind.IfKeyword
				ifStmt = IfStatement.parse(stream)
				return ElseClause(elseKeyword, ifStmt)
			
			stream.skipBlankLines
			clause = StatementClause.parse(stream)
			return ElseClause(elseKeyword, clause)

	cue init(elseKeyword as Cobra.Compiler.IToken, ifStatement as IfStatement)
		base.init(elseKeyword, ifStatement.lastToken, [ifStatement] to IReadOnlyList<of IStatement>)
		_ifStatement = ifStatement

	cue init(elseKeyword as Cobra.Compiler.IToken, clause as StatementClause)
		base.init(elseKeyword, clause.lastToken)
		_clause = clause
		_addChild(clause)

	def toCobraSource as String is override
		sb = StringBuilder("else")
		if _ifStatement
			sb.append(" [_ifStatement.toCobraSource]")
			return sb.toString
		sb.append(_clause)
		return sb.toString