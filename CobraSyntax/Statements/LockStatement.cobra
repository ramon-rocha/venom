
namespace Venom.CobraSyntax

class LockStatement
	inherits Statement
	implements IStatementContainer
	adds StatementContainerBehavior
	
	get lockKeyword from var as Cobra.Compiler.IToken
	get expression from var as IExpression

	def parse(stream as ITokenStream) as LockStatement is new, shared
		require
			stream.token.kind == TokenKind.LockKeyword
		test
			source = "lock _access, .doSomething"
			stream = TokenStream(source, 'test.cobra')
			stmt = LockStatement.parse(stream)
			assert stmt.expression inherits IdentifierExpression
			assert stmt.statements.count == 1
		test
			source =
			"lock this\n" +
			"    .doSomething\n" +
			"    .doSomethingElse"
			stream = TokenStream(source, 'test.cobra')
			stmt = LockStatement.parse(stream)
			assert stmt.expression inherits ThisLiteral
			assert stmt.statements.count == 2
		body
			keyword = stream.expect(TokenKind.LockKeyword)
			expr = Expression.parse(stream)
			if stream.token.kind <> TokenKind.Comma
				skipped = stream.skipToNextLine
			else
				skipped = TokenList()

			stream.skipBlankLines
			clause = StatementClause.parse(stream)
			return LockStatement(keyword, expr, clause, skipped)

	cue init(
		keyword as Cobra.Compiler.IToken,
		expression as IExpression,
		clause as StatementClause,
		skipped as IReadOnlyTokenList
	)
		require keyword.kind == TokenKind.LockKeyword
		base.init(keyword, skipped)
		_lockKeyword = keyword
		_expression = expression
		_addChild(expression)
		_clause = clause
		_addChild(clause)

