
namespace Venom.CobraSyntax

class PrintStatement inherits Statement

	invariant
		_toKeyword implies _destination
		_destination implies _toKeyword

	get printKeyword from var as Cobra.Compiler.IToken
		"""Token for the 'print' keyword."""
	
	get toKeyword from var as Cobra.Compiler.IToken?
		"""Optional token for the 'to' keyword.  nil when not present."""
	
	get destination from var as IExpression?
		"""Optional TextWriter to print to.  nil when printing to Console."""
	
	get expressions from var as IReadOnlyList<of IExpression>
		"""One or more comma delimited expressions to print"""

	
	get stopKeyword as Cobra.Compiler.IToken?
		"""Optional token for the 'stop' keyword.  nil when not present."""
		return if(_lastToken.kind == TokenKind.StopKeyword, _lastToken, nil)

	var _endsPrintStatement as IReadOnlyList<of String> is shared, readonly = [
		TokenKind.EndOfLine,
		TokenKind.StopKeyword,
		TokenKind.EndOfFile,
	]
	
	def parse(stream as ITokenStream) as PrintStatement is new, shared
		test
			source = "print 'Hello, World!'"
			stream = TokenStream(source, "test.cobra")
			stmt = PrintStatement.parse(stream)
			assert stmt.firstToken.text == "print"
			assert stmt.toKeyword == nil
			assert stmt.destination == nil
			assert stmt.extraTokens.count == 0
			assert stmt.expressions.count == 1
			assert stmt.expressions[0] inherits StringLiteral
			assert stmt.lastToken.kind == TokenKind.EndOfLine
			assert stmt.stopKeyword == nil

			source += " stop"
			stream = TokenStream(source, "test.cobra")
			stmt = PrintStatement.parse(stream)
			assert stmt.lastToken.kind == TokenKind.StopKeyword
			assert stmt.stopKeyword <> nil

			source += ", unexpected(foo)"
			stream = TokenStream(source, "test.cobra")
			stmt = PrintStatement.parse(stream)
			assert stmt.lastToken.kind == TokenKind.StopKeyword
			assert stmt.extraTokens.count == 4
			assert stream.token.isEOF
		test
			source = "print a, b"
			stream = TokenStream(source, "test.cobra")
			stmt = PrintStatement.parse(stream)
			assert stmt.expressions.count == 2
		test
			source = "print to sw, a, b"
			stream = TokenStream(source, "test.cobra")
			stmt = PrintStatement.parse(stream)
			assert stmt.toKeyword <> nil
			assert stmt.destination <> nil
			assert stmt.expressions.count == 2
			assert stmt.destination.firstToken.lineNum _
				== stmt.expressions[0].firstToken.lineNum _
				== stmt.expressions[1].firstToken.lineNum
		test
			source = "print to sw \n\tline1 \n\tline2"
			stream = TokenStream(source, "test.cobra")
			stmt = PrintStatement.parse(stream)
			assert stmt.toKeyword <> nil
			assert stmt.destination <> nil
			assert stmt.expressions.count == 2
			assert stmt.expressions[0].firstToken.lineNum == stmt.destination.firstToken.lineNum + 1
			assert stmt.expressions[1].firstToken.lineNum == stmt.destination.firstToken.lineNum + 2

			source += "\n\n\n\n\tline6"
			stream = TokenStream(source, "test.cobra")
			stmt = PrintStatement.parse(stream)
			assert stmt.expressions.count == 3
			assert stmt.expressions[2].firstToken.lineNum == stmt.destination.firstToken.lineNum + 6
		body
			isIndented = false
			printKeyword = stream.expect(TokenKind.PrintKeyword)
			toKeyword = stream.grabOptional(TokenKind.ToKeyword)
			if toKeyword
				destination = Expression.parse(stream)
				stream.skipBlankLines
				isIndented = stream.grabOptional(TokenKind.Indent) <> nil
			
			expressions = ExpressionList()
			if isIndented
				stream.skipBlankLines
				while stream.token.kind <> TokenKind.Dedent
					expressions.add(Expression.parse(stream))
					stream.skipBlankLines
				
				lastToken = stream.expect(TokenKind.Dedent)

			else
				stream.grabOptional(TokenKind.Comma) # TODO store these, they are grabbed as optional but it's actually a syntax error if they are missing
				while stream.token.kind not in _endsPrintStatement
					if expressions.count <> 0, stream.expect(TokenKind.Comma)
					expressions.add(Expression.parse(stream))
				
				lastToken = stream.grabOneOf(_endsPrintStatement)
				if lastToken.kind == TokenKind.StopKeyword
					skipped = stream.skipToNextLine to ?
			
			return PrintStatement(printKeyword, toKeyword, destination, expressions, lastToken, skipped)

	cue init(
		printKeyword as Cobra.Compiler.IToken,
		toKeyword as Cobra.Compiler.IToken?,
		destination as IExpression?,
		expressions as ExpressionList,
		lastToken as Cobra.Compiler.IToken,
		skipped as TokenList? = nil
	)
		require
			destination implies toKeyword
		body
			base.init(printKeyword, skipped)
			_printKeyword, _toKeyword, _destination, _lastToken = printKeyword, toKeyword, destination, lastToken
			_expressions = ExpressionList(expressions)
			if destination, _addChild(destination)
			for e in _expressions, _addChild(e) # TODO? Add expression list as single node

	def toCobraSource as String is override
		sb = StringBuilder("print")
		if .toKeyword
			sb.append(" to [_destination.toCobraSource]")
		sb.append(" TODO ")
		return sb.toString