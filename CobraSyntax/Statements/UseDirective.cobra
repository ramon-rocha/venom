use ICSharpCode

namespace Venom.CobraSyntax

extend Cobra.Compiler.IToken

	def endsLine as bool
		return .kind == TokenKind.EndOfLine or .isEOF

class UseDirective inherits Statement
	
	get useKeyword from var as Cobra.Compiler.IToken

	get alias from var as Identifier?
	get assignToken from var as Cobra.Compiler.IToken?

	get qualifiedId from var as QualifiedIdentifier
		"""
		Either the namespace identifier or type identifier
		"""

	get fromKeyword from var as Cobra.Compiler.IToken?
	get libraryName from var as LibraryName?
	
	get isLibraryImplicit as bool
		return _fromKeyword == nil


	def parse(stream as ITokenStream) as UseDirective is new, shared
		require
			stream.token.kind == TokenKind.UseKeyword
		test
			source = "use Foo"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.firstToken is ud.useKeyword
			assert ud.lastToken is ud.qualifiedId.lastToken
			assert ud.qualifiedId.name == "Foo"
			assert ud.alias == nil
			assert ud.assignToken == nil
			assert ud.fromKeyword == nil
			assert ud.isLibraryImplicit
		test
			source = "use Foo.Bar"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.qualifiedId.name == "Bar"
			assert ud.qualifiedId.qualifiedName == "Foo.Bar"
		test
			source = "use Foo.Bar from FooBar"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.fromKeyword <> nil
			assert not ud.isLibraryImplicit
			assert ud.libraryName.libraryFileName == "FooBar"
		test
			source = 'use Foo.Bar from "FooBar"'
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.libraryName.libraryFileName == "FooBar"
		test
			source = "use Foo.Bar from 'FooBar'"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.libraryName.libraryFileName == "FooBar"
		test
			source = "use f = Foo"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.alias.name == "f"
			assert ud.assignToken <> nil
			assert ud.qualifiedId.name == "Foo"
		test
			source = "use fb = Foo<of Bar>"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.alias.name == "fb"
			assert ud.qualifiedId.qualifiedName == "Foo<of Bar>"
			assert ud.fromKeyword == nil
		test
			source = "use f = Foo.Bar from FooBar"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.alias.name == "f"
			assert ud.qualifiedId.qualifiedName == "Foo.Bar"
			assert ud.fromKeyword <> nil
			assert ud.libraryName.libraryFileName == "FooBar"
		test
			source = 'use f = Foo.Bar from "FooBar"'
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.libraryName.libraryFileName == "FooBar"
		test
			source = "use f = Foo.Bar from 'FooBar'"
			stream = TokenStream(source, 'test.cobra')
			ud = UseDirective.parse(stream)
			assert ud.libraryName.libraryFileName == "FooBar"
		body
			useKeyword = stream.expect(TokenKind.UseKeyword)

			isAlias = false
			howFar = 0
			while not stream.peek(howFar).endsLine
				howFar += 1
				if stream.peek(howFar).kind == TokenKind.AssignmentOperator
					isAlias = true
					break
			
			skipped = TokenList()
			if isAlias
				alias = Identifier.parse(stream) to ?
				skipped.addRange(stream.skipTo(TokenKind.AssignmentOperator))
				assignToken = skipped.last to ?
				skipped.remove(assignToken)

			qualifiedId = QualifiedIdentifier.parse(stream)

			fromKeyword = stream.grabOptional(TokenKind.FromKeyword)
			if fromKeyword <> nil
				libName = LibraryName.parse(stream) to ?

			skipped.addRange(stream.skipToNextLine)
			
			return UseDirective(useKeyword, alias, assignToken, qualifiedId, fromKeyword, libName, skipped)
	
	cue init(
		useKeyword as Cobra.Compiler.IToken,
		alias as Identifier?,
		assignToken as Cobra.Compiler.IToken?,
		qualifiedId as QualifiedIdentifier,
		fromKeyword as Cobra.Compiler.IToken?,
		libraryName as LibraryName?,
		skippedTokens as TokenList?
	)
		require
			useKeyword.isKeyword
			useKeyword.which == TokenKind.UseKeyword
			fromKeyword <> nil implies libraryName <> nil
			libraryName <> nil implies fromKeyword <> nil
		ensure
			_extraTokens == skippedTokens
		body
			base.init(useKeyword, qualifiedId.lastToken, skippedTokens)
			_useKeyword, _alias, _assignToken, _qualifiedId = useKeyword, alias, assignToken, qualifiedId
			_addChild(qualifiedId)
			if fromKeyword <> nil
				_fromKeyword, _libraryName = fromKeyword, libraryName
				_addChild(_libraryName to !)


class LibraryName
	inherits SyntaxNode
	"""
	Follows the 'from' keyword in a use directive.
	"""

	get libraryFileName from var as String

	var _kinds as IReadOnlyList<of String> is shared, readonly = [
		TokenKind.SingleQuotedString,
		TokenKind.DoubleQuotedString
	]

	def parse(stream as ITokenStream) as LibraryName is shared, new
		if stream.token.kind == TokenKind.Identifier
			return LibraryName(QualifiedIdentifier.parse(stream))
		return LibraryName(stream.grabOneOf(_kinds))
	
	cue init(stringToken as Cobra.Compiler.IToken)
		base.init(stringToken, nil)
		fileName = stringToken.value to? String?
		_libraryFileName = fileName ? ""
		
	cue init(libName as QualifiedIdentifier)
		base.init(libName.firstToken, nil)
		_libraryFileName = libName.qualifiedName
		_addChild(libName)