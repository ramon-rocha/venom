
namespace Venom.CobraSyntax

interface IExpression
	inherits ISyntaxNode

	get isSpaceAgnostic as bool
		"""
		Indicates if whitespace (end-of-lines, indents, and dedents) is significant
		to this expression.

		Whitespace is not significant inside collection literals and most binary
		operator expressions.
		"""
	
mixin ExpressionBehavior

	var _isSpaceAgnostic as bool is protected = false
	get isSpaceAgnostic from var

class Expression
	implements IExpression
	inherits SyntaxNode
	adds ExpressionBehavior
	is abstract
	"""
	An abstract syntax node for an expression.
	
	If possible, do not put an implementation in this class.  Put it in ExpressionBehavior.
	"""

	def parse(stream as ITokenStream) as IExpression is new, shared
		test
			source = "x = 1 + 2 * 3"
			stream = TokenStream(source, 'test.cobra')
			assignExpr = Expression.parse(stream) to AssignmentExpression
			assert assignExpr.leftExpression inherits IdentifierExpression
			addExpr = assignExpr.rightExpression to AdditionExpression
			assert addExpr.leftExpression inherits IntegerLiteral
			assert addExpr.rightExpression inherits MultiplicationExpression
		test
			source = "x = 1 * 2 + 3"
			stream = TokenStream(source, 'test.cobra')
			assignExpr  = Expression.parse(stream) to AssignmentExpression
			assert assignExpr.leftExpression inherits IdentifierExpression
			addExpr = assignExpr.rightExpression to AdditionExpression
			assert addExpr.leftExpression inherits MultiplicationExpression
			assert addExpr.rightExpression inherits IntegerLiteral
		test
			source = "x = 1 * 2 + 3 * 1"
			stream = TokenStream(source, 'test.cobra')
			assignExpr  = Expression.parse(stream) to AssignmentExpression
			assert assignExpr.leftExpression inherits IdentifierExpression
			addExpr = assignExpr.rightExpression to AdditionExpression
			assert addExpr.leftExpression inherits MultiplicationExpression
			assert addExpr.rightExpression inherits MultiplicationExpression
		test whitespaceAgnostic
			source = "x = \n\t1 * 2 + \n 3 * \n\t\t 1" # same as previous test
			stream = TokenStream(source, 'test.cobra')
			assignExpr  = Expression.parse(stream) to AssignmentExpression
			assert assignExpr.leftExpression inherits IdentifierExpression
			addExpr = assignExpr.rightExpression to AdditionExpression
			assert addExpr.leftExpression inherits MultiplicationExpression
			assert addExpr.rightExpression inherits MultiplicationExpression
		test explicit_line_continuation_with_whitespace_agnostic_expression
			source =
			"b = a * _\n" +
			"10"
			stream = TokenStream(source, 'test.cobra')
			assert stream.indentLevel == 0
			expr = Expression.parse(stream) to AssignmentExpression
			right = expr.rightExpression to MultiplicationExpression
			assert right.rightExpression inherits IntegerLiteral
			assert stream.indentLevel == 0
		body
			return .parse(stream, TokenKind.binaryOperatorPrecedence)

	def parse(
		stream as ITokenStream,
		precedenceMap as IReadOnlyDictionary<of String, int>
	) as IExpression is shared
		return _parse(stream, 0, nil, precedenceMap)
	
	def _getOperatorKind(stream as ITokenStream) as String is shared
		"""
		A helper function that returns the current kind of token for the given
		token stream.  The stream is potentially modified to turn two tokens
		into a single operator token.
		"""
		opKind = stream.token.kind

		text as String? = nil
		if opKind == TokenKind.ReferenceEqualityOperator _
		and stream.peek.kind == TokenKind.LogicalNotOperator
			text = "is not"
			opKind = TokenKind.NonReferenceEqualityOperator
		else if opKind == TokenKind.LogicalNotOperator _
		and stream.peek.kind == TokenKind.MembershipCheckOperator
			text = "not in"
			opKind = TokenKind.NonMembershipCheckOperator
		
		if text <> nil
			newToken = stream.grab.copy(opKind, text)
			stream.replace(newToken)
		
		return opKind

	def _parse(
		stream as ITokenStream,
		minPrecedence as int,
		leftExpr as IExpression?,
		precedenceMap as IReadOnlyDictionary<of String, int>
	) as IExpression is shared
		"""
		Uses the precedence climbing algorithm to parse expressions.
		See: http://en.wikipedia.org/wiki/Operator-precedence_parser#Precedence_climbing_method
		"""
		if stream.token.kind in TokenKind.cobraTypes
			# handle things like:
			# number.parse('3.14')
			stream.replace(stream.token.copy(TokenKind.Identifier))
		
		left = leftExpr ? _parse(stream)

		while true
			
			opKind = _getOperatorKind(stream)
			precedence = try precedenceMap[opKind] catch get -1
			if precedence < minPrecedence
				break
			
			if opKind == TokenKind.IndexerStart
				indexer = IndexerExpression.parse(stream)
				left = IndexedExpression(left, indexer)
				return _parse(stream, minPrecedence, left, precedenceMap)

			else if opKind == TokenKind.OpenParenthesis
				openParen = stream.grab
				args = List<of Argument>(1)
				args.add(Argument.parse(stream))
				closeParen = stream.expect(TokenKind.CloseParenthesis)
				left = ImplicitCallExpression(left, openParen, args, closeParen)
				return _parse(stream, minPrecedence, left, precedenceMap)
			
			opToken = stream.grab
			assert opKind == opToken.kind
			assert precedenceMap.containsKey(opKind)

			right as IExpression? = nil
			if opKind == TokenKind.TypeCastOperator or opKind == TokenKind.NilCoalescingCastOperator
				if stream.token.kind == TokenKind.ExclamationPoint or stream.token.kind == TokenKind.QuestionMark
					right = TypeExpression(stream.grab, nil)
				else
					right = TypeExpression.parse(stream)
			else if opKind == TokenKind.MemberAccessOperator and stream.token.isKeyword
				stream.replace(stream.token.copy(TokenKind.Identifier))
				right = IdentifierExpression.parse(stream)
			else
				isRightAssoc = Cobra.Compiler.OperatorSpecs.rightAssoc.containsKey(opKind)
				nextMinPrecedence = if(isRightAssoc, precedence, precedence + 1)

				if opKind in BinaryOperatorExpression.implicitLineContinuationKinds _
				and stream.token.kind == TokenKind.EndOfLine _
				and not stream implements IWhitespaceAgnosticTokenStream
					right = _parse(WhitespaceAgnosticTokenStreamWrapper(stream), nextMinPrecedence, nil, precedenceMap)
				else
					right = _parse(stream, nextMinPrecedence, nil, precedenceMap)
			
			binOpType = BinaryOperatorExpression.typeMap[opKind]
			left =  binOpType(left, opToken, right)

		return left

	def _parse(stream as ITokenStream) as IExpression is shared
		"""
		Parses expression operands
		"""
		kind = stream.token.kind

		if TokenKind.unaryOperatorPrecedence.containsKey(kind)
			return UnaryOperatorExpression.parse(stream)
		
		else if kind in CollectionLiteral.validStartKinds
			return CollectionLiteral.parse(stream)
		
		else if kind in StringLiteral.validKinds
			return StringLiteral.parse(stream)
		
		branch kind

			on TokenKind.Identifier, return IdentifierExpression.parse(stream)

			on TokenKind.CallStart or TokenKind.GenericIdentifierStart
				return CallExpression.parse(stream)

			on TokenKind.MemberAccessOperator
				# leading dot such as in '.foo'
				implicitThis = ThisLiteral(stream.expect(TokenKind.ThisKeyword))
				return implicitThis
			
			on TokenKind.NilKeyword, return NilLiteral(stream.grab)
			on TokenKind.TrueKeyword or TokenKind.FalseKeyword, return BooleanLiteral(stream.grab)
			on TokenKind.ThisKeyword, return ThisLiteral(stream.grab)
			on TokenKind.BaseKeyword, return BaseLiteral(stream.grab)

			on TokenKind.IntegerLiteral, return IntegerLiteral(stream.grab)
			on TokenKind.FractionLiteral, return FractionLiteral(stream.grab)
			on TokenKind.DecimalLiteral, return DecimalLiteral(stream.grab)
			on TokenKind.FloatLiteral, return FloatLiteral(stream.grab)

			on TokenKind.SingleQuotedCharacter or TokenKind.DoubleQuotedCharacter
				return CharacterLiteral(stream.grab)
			
			on TokenKind.IfExpressionStart, return IfExpression.parse(stream)
			on TokenKind.ForKeyword, return ForExpression.parse(stream)
			on TokenKind.TryKeyword, return TryCatchExpression.parse(stream)

			on TokenKind.DoKeyword or TokenKind.AnonymousMethodStart
				return BaseAnonymousMethodExpression.parse(stream)
			
			on TokenKind.OpenParenthesis, return ParenthesizedExpression.parse(stream)

			else
				trace stream.token  # TODO : see CobraParser line 3109

		# missing expression
		t = stream.token
		return ErrorExpression(Cobra.Compiler.Token(t.fileName, t.lineNum, t.colNum, t.charNum, t.kind, "", nil, true))

class ErrorExpression
	inherits Expression
	"""
	An unknown expression or missing expression
	"""

	invariant
		.extraTokens.count == 0
		.firstToken.isEmpty
		.firstToken is .lastToken
		.errors.count == 1

	cue init(token as Cobra.Compiler.IToken)
		base.init(token, nil)
		_addError(.firstToken, "Expecting an expression but got [.firstToken.kind]")