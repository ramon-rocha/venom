
namespace Venom.CobraSyntax

class ConstantDeclaration inherits TypeMemberDeclaration
	# Very similar to FieldDeclaration
	get constKeyword from var as Cobra.Compiler.IToken

	get asKeyword from var as Cobra.Compiler.IToken?
	get typeIdentifier from var as TypeIdentifier?

	#TODO: create AssignmentClause class
	get equalsTokens from var as IReadOnlyTokenList
	get initializationExpressions from var as IReadOnlyList<of IExpression>

	# TODO? Create ConstantSpecifications?
	get modifiers from var as IReadOnlyList<of ModifierSpecification>
	get attributes from var as IReadOnlyList<of AttributeSpecification>

	var specKinds as IReadOnlyList<of String> is readonly, shared = [
		TokenKind.AssignmentOperator,
		TokenKind.IsKeyword,
		TokenKind.HasKeyword
	]

	def parse(stream as ITokenStream) as ConstantDeclaration is new, shared
		require
			stream.token.kind == TokenKind.ConstKeyword
		test
			source = "const x = 1"
			stream = TokenStream(source, "")
			constant = ConstantDeclaration.parse(stream)
			assert constant.errors.count == 0
			assert constant.name == constant.identifier.name == "x"
			assert constant.asKeyword == nil
			assert constant.typeIdentifier == nil
			assert constant.equalsTokens.count == 1
			assert constant.initializationExpressions[0] inherits IntegerLiteral
			assert constant.modifiers.count == constant.attributes.count == 0
			assert constant.docString == nil
		test
			source = "const x as number = 1.0"
			stream = TokenStream(source, "")
			constant = ConstantDeclaration.parse(stream)
			assert constant.errors.count == 0
			assert constant.name == constant.identifier.name == "x"
			assert constant.asKeyword <> nil
			assert constant.typeIdentifier.qualifiedName == "number"
			assert constant.equalsTokens.count == 1
			assert constant.initializationExpressions[0] inherits FractionLiteral
			assert constant.modifiers.count == constant.attributes.count == 0
			assert constant.docString == nil
		test
			source = "const x as number is protected = 1.0"
			stream = TokenStream(source, "")
			constant = ConstantDeclaration.parse(stream)
			assert constant.errors.count == 0
			assert constant.name == constant.identifier.name == "x"
			assert constant.asKeyword <> nil
			assert constant.typeIdentifier.qualifiedName == "number"
			assert constant.equalsTokens.count == 1
			assert constant.initializationExpressions[0] inherits FractionLiteral
			assert constant.modifiers.count == 1
			assert constant.attributes.count == 0
			assert constant.docString == nil
		test
			source =
			"const x = 1.0\n" +
			"    is protected\n" +
			"    has Obsolete('use y instead')"
			stream = TokenStream(source, "")
			constant = ConstantDeclaration.parse(stream)
			assert constant.errors.count == 0
			assert constant.name == constant.identifier.name == "x"
			assert constant.asKeyword == nil
			assert constant.typeIdentifier == nil
			assert constant.equalsTokens.count == 1
			assert constant.initializationExpressions[0] inherits FractionLiteral
			assert constant.modifiers.count == 1
			assert constant.attributes.count == 1
			assert constant.docString == nil
		test
			source =
			"const x\n" +
			"    = 1.0\n" +
			"    is protected\n" +
			'    """the docstring goes here"""'
			stream = TokenStream(source, "")
			constant = ConstantDeclaration.parse(stream)
			assert constant.errors.count == 0
			assert constant.name == constant.identifier.name == "x"
			assert constant.asKeyword == nil
			assert constant.typeIdentifier == nil
			assert constant.equalsTokens.count == 1
			assert constant.initializationExpressions[0] inherits FractionLiteral
			assert constant.modifiers.count == 1
			assert constant.attributes.count == 0
			assert constant.docString <> nil
		body
			constKeyword = stream.expect(TokenKind.ConstKeyword)
			id = Identifier.parse(stream)
			asToken = stream.grabOptional(TokenKind.AsKeyword)
			if asToken <> nil
				typeId = TypeIdentifier.parse(stream) to ?

			equals = TokenList()
			inits = ExpressionList()
			mods = List<of ModifierSpecification>()
			atts = List<of AttributeSpecification>()

			while stream.token.kind in .specKinds
				branch stream.token.kind
					on TokenKind.AssignmentOperator
						equals.add(stream.grab)
						inits.add(Expression.parse(stream))
					on TokenKind.IsKeyword
						mods.add(ModifierSpecification.parse(stream))
					on TokenKind.HasKeyword
						atts.add(AttributeSpecification.parse(stream))

			stream.skipBlankLines
			indent = stream.grabOptional(TokenKind.Indent)
			if indent <> nil
				while stream.token.kind in .specKinds
					branch stream.token.kind
						on TokenKind.AssignmentOperator
							equals.add(stream.grab)
							inits.add(Expression.parse(stream))
						on TokenKind.IsKeyword
							mods.add(ModifierSpecification.parse(stream))
						on TokenKind.HasKeyword
							atts.add(AttributeSpecification.parse(stream))
					stream.skipBlankLines
				
				if stream.token.startsDocString
					docString = DocString.parse(stream) to ?
					stream.skipBlankLines
				dedent = stream.expect(TokenKind.Dedent)

			return ConstantDeclaration(
				constKeyword, id, asToken, typeId, equals, inits, indent, docString, dedent, mods, atts
			)

	cue init(
		constKeyword as Cobra.Compiler.IToken,
		identifier as Identifier,
		asKeyword as Cobra.Compiler.IToken?,
		typeId as TypeIdentifier?,
		equalsTokens as Cobra.Compiler.IToken*,
		initExprs as IExpression*,
		indent as Cobra.Compiler.IToken?,
		docString as DocString?,
		dedent as Cobra.Compiler.IToken?,
		mods as ModifierSpecification*,
		attributes as AttributeSpecification*
	)
		require
			constKeyword.which == TokenKind.ConstKeyword
			asKeyword <> nil implies typeId <> nil
		body
			base.init(constKeyword, identifier, indent, docString, dedent, nil, nil)
			_constKeyword = constKeyword
			_identifier = identifier
			if asKeyword
				_asKeyword, _typeIdentifier = asKeyword, typeId
				_addChild(typeId to !)
			_equalsTokens = TokenList(equalsTokens)
			_initializationExpressions = ExpressionList(initExprs)
			for e in initExprs, _addChild(e)
			_indentToken, _dedentToken = indent, dedent
			_docString = docString
			_modifiers = List<of ModifierSpecification>(mods)
			for m in mods, _addChild(m)
			_attributes = List<of AttributeSpecification>(attributes)
			for a in attributes, _addChild(a)

