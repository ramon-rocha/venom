
namespace Venom.CobraSyntax

class ParameterDeclaration
	inherits SyntaxNode
	adds NamedBehavior
	"""
	Declares a local parameter for a method
	"""
	get identifier from var as Identifier
	get asKeyword from var as Cobra.Compiler.IToken?
	get modifiers from var as IReadOnlyTokenList
	get typeIdentifier from var as TypeIdentifier?
	get defaultValue from var as IExpression?

	get isVariableLength as bool
		return any for m in _modifiers get m.kind == TokenKind.VariKeyword

	get isOutputOnly as bool
		return any for m in _modifiers get m.kind == TokenKind.OutKeyword

	get isInputAndOutput as bool
		return any for m in _modifiers get m.kind == TokenKind.InOutKeyword

	var _paramModifiers as IReadOnlyList<of String> is shared, readonly = [
		TokenKind.OutKeyword,
		TokenKind.InOutKeyword,
		TokenKind.VariKeyword,
		TokenKind.InKeyword,
	]

	def parse(stream as ITokenStream) as ParameterDeclaration? is new, shared
		test
			source = "x"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.identifier.name == param.name == "x"
			assert param.asKeyword == nil
			assert param.typeIdentifier == nil
			assert param.defaultValue == nil
			assert param.isVariableLength == param.isOutputOnly == param.isInputAndOutput == false
		test
			source = "x as int"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword <> nil
			assert param.typeIdentifier.name == "int"
			assert param.defaultValue == nil
			assert param.isVariableLength == param.isOutputOnly == param.isInputAndOutput == false
		test
			source = "x as int = 5"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword <> nil
			assert param.typeIdentifier.name == "int"
			assert param.defaultValue inherits IntegerLiteral
		test
			source = "x = 5"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword == nil
			assert param.typeIdentifier == nil
			assert param.defaultValue inherits IntegerLiteral
		test
			source = "x as out int"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.asKeyword <> nil
			assert param.typeIdentifier <> nil
			assert param.defaultValue == nil
			assert param.isOutputOnly == true
			assert param.isVariableLength == param.isInputAndOutput == false
		test
			source = "x as inout int"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.isVariableLength == param.isOutputOnly == false
			assert param.isInputAndOutput == true
		test
			source = ns"x as vari inout int = @[1, 2, 3, 4]"
			stream = TokenStream(source, 'test.cobra')
			param = ParameterDeclaration.parse(stream)
			assert param.defaultValue inherits ArrayLiteral
			assert param.isOutputOnly == false
			assert param.isVariableLength == param.isInputAndOutput == true
		body
			id = Identifier.parse(stream)
			mods = TokenList()

			asKeyword = stream.grabOptional(TokenKind.AsKeyword)
			if asKeyword
				while stream.token.kind in _paramModifiers
					mods.add(stream.grab)
				typeIdentifier = TypeIdentifier.parse(stream) to ?
			
			if stream.grabOptional(TokenKind.AssignmentOperator)
				defaultValue = Expression.parse(stream) to ?
			
			return ParameterDeclaration(id, asKeyword, mods, typeIdentifier, defaultValue)
	
	cue init(
		id as Identifier,
		asKeyword as Cobra.Compiler.IToken?,
		modifiers as TokenList,
		typeIdentifier as TypeIdentifier?,
		defaultValue as IExpression?
	)
		require asKeyword implies typeIdentifier
		base.init(id, nil)
		_identifier = id
		_name = id.name
		if asKeyword
			_asKeyword = asKeyword
			_lastToken = asKeyword
		_modifiers = TokenList(modifiers)
		if typeIdentifier
			_typeIdentifier = typeIdentifier
			_addChild(typeIdentifier)
		if defaultValue
			_defaultValue = defaultValue
			_addChild(defaultValue)