
namespace Venom.CobraSyntax

class ExpectStatement
	inherits Statement
	implements IStatementContainer
	adds StatementContainerBehavior

	get expectKeyword as Cobra.Compiler.IToken
		return _firstToken
	
	get exceptionTypeIdentifier from var as TypeIdentifier

	def parse(stream as ITokenStream) as ExpectStatement is new, shared
		require
			stream.token.kind == TokenKind.ExpectKeyword
		test
			source = "expect FormatException\n\ti = Int32.parse('abc')"
			stream = TokenStream(source, 'test.cobra')
			stmt = ExpectStatement.parse(stream)
			assert stmt.exceptionTypeIdentifier.name == "FormatException"
			assert stmt.statements.count == 1
		test
			source = ns"expect ArgumentOutOfRangeException, print ints[5]"
			stream = TokenStream(source, 'test.cobra')
			stmt = ExpectStatement.parse(stream)
			assert stmt.exceptionTypeIdentifier.name == "ArgumentOutOfRangeException"
			assert stmt.statements.count == 1
		body
			kw = stream.expect(TokenKind.ExpectKeyword)
			id = TypeIdentifier.parse(stream)
			skipped = TokenList()
			if stream.token.kind <> TokenKind.Comma
				skipped.addRange(stream.skipToNextLine)
			clause = StatementClause.parse(stream)
			return ExpectStatement(kw, id, skipped, clause)
	
	cue init(
		expectKeyword as Cobra.Compiler.IToken,
		typeId as TypeIdentifier,
		skipped as TokenList,
		clause as StatementClause
	)
		base.init(expectKeyword, skipped)
		_exceptionTypeIdentifier = typeId
		_addChild(typeId)
		_clause = clause
		_addChild(clause)