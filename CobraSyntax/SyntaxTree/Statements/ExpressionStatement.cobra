
namespace Venom.CobraSyntax

class ExpressionStatement
	inherits Expression
	adds StatementBehavior
	implements IExpression, IStatement

	invariant
		.isSpaceAgnostic == .expression.isSpaceAgnostic

	get expression from var as IExpression

	def parse(stream as ITokenStream) as IStatement is new, shared
		test
			source = "text = File.readAllText('foo.txt')"
			stream = TokenStream(source, 'test.cobra')

			stmt = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt.extraTokens.count == 0

			assign = stmt.expression to AssignmentExpression
			left = assign.leftExpression to IdentifierExpression
			assert left.identifier.name == 'text'

			right = assign.rightExpression to MemberAccessExpression
			idExpr = right.leftExpression to IdentifierExpression
			assert idExpr.identifier.name == 'File'

			member = right.rightExpression to CallExpression
			assert member.identifier.name == 'readAllText'
			assert member.arguments.count == 1
			assert member.arguments[0].expression inherits StringLiteral
			assert member.lastToken.kind == TokenKind.CallEnd

		test hangingIndent
			# make sure space agnostic expressions with leftover dedents don't mess up following statements
			source =
			"weekdays = {\n" +
			"       'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'\n" +
			"    }\n" +
			"\n" +
			"weekends = {\n" +
			"    'Saturday', 'Sunday'\n" +
			"    }"
			stream = TokenStream(source, 'test.cobra')
			
			stmt1 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt1.extraTokens.count == 0
			expr1 = stmt1.expression to AssignmentExpression
			assert expr1.rightExpression inherits SetLiteral
			
			stmt2 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt2.extraTokens.count == 0
			expr2 = stmt2.expression to AssignmentExpression
			assert expr2.rightExpression inherits SetLiteral
		
		test spaceAgnosticDedent
			# handle leftover indents
			source =
			"    weekdays = {\n" +
			"'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'\n" +
			"}\n" +
			"\n" +
			"    weekends = {\n" +
			"'Saturday', 'Sunday'\n" +
			"}"
			stream = TokenStream(source, 'test.cobra')
			stream.grab

			stmt1 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt1.extraTokens.count == 0
			expr1 = stmt1.expression to AssignmentExpression
			assert expr1.rightExpression inherits SetLiteral

			stmt2 = ExpressionStatement.parse(stream) to ExpressionStatement
			assert stmt2.extraTokens.count == 0
			expr2 = stmt2.expression to AssignmentExpression
			assert expr2.rightExpression inherits SetLiteral
		body
			indentLevel = stream.indentLevel
			expr = Expression.parse(stream)
			return .parse(stream, expr, indentLevel)

	def parse(stream as ITokenStream, expression as IExpression, originalIndentLevel as int) as IStatement is shared
		skipped = stream.skipTo(TokenKind.EndOfLine)
		lastToken = skipped.last
		skipped.remove(lastToken)

		if expression.isSpaceAgnostic
			howMany = Math.abs(originalIndentLevel - stream.indentLevel)
			whitespaceKind = if(originalIndentLevel > stream.indentLevel, TokenKind.Indent, TokenKind.Dedent)
			stream.skipBlankLines
			for i in howMany, stream.expect(whitespaceKind)

		return ExpressionStatement(expression, lastToken, skipped)
		

	cue init(expr as IExpression, lastToken as Cobra.Compiler.IToken, extraTokens as TokenList?)
		ensure expr in _children
		base.init(expr, extraTokens)
		_expression = expr
		_isSpaceAgnostic = expr.isSpaceAgnostic
		if lastToken.charNum > _lastToken.charNum
			_lastToken = lastToken