
namespace Venom.CobraSyntax

class TokenKind
	"""
	This class contains string constants, shared variables, and shared methods
	for determing which kind of token a	token instance is.
	"""
	
	cue init is protected
		base.init
	
	#region Cobra Types
	const IntegerType = 'INT'
	const IntegerSizeType = 'INT_SIZE'
	const UnsignedIntegerType = 'UINT'
	const UnsignedIntegerSizeType = 'UINT_SIZE'
	const BooleanType = 'BOOL'
	const CharacterType = 'CHAR'
	const DecimalType = 'DECIMAL'
	const FloatType = 'FLOAT'
	const FloatSizeType = 'FLOAT_SIZE'
	const NumberType = 'NUMBER'
	const PassthroughType = 'PASSTHROUGH'
	const DynamicType = 'DYNAMIC'

	var cobraTypes as IReadOnlyList<of String> is shared, readonly = [
		.IntegerType,
		.IntegerSizeType,
		.UnsignedIntegerType,
		.UnsignedIntegerSizeType,
		.BooleanType,
		.CharacterType,
		.DecimalType,
		.FloatType,
		.FloatSizeType,
		.NumberType,
		.PassthroughType,
		.DynamicType
	]
	#endregion

	#region Numeric Literals
	const IntegerLiteral = 'INTEGER_LIT'
	const DecimalLiteral = 'DECIMAL_LIT'
	const FractionLiteral = 'FRACTIONAL_LIT'
	const FloatLiteral = 'FLOAT_LIT'
	#endregion

	#region Misc. Tokens
	const EndOfLine = 'EOL'
	const EndOfFile = 'EOF'
	const Indent = 'INDENT'
	const Dedent = 'DEDENT'
	const CompilerDirective = 'AT_ID'
	#endregion

	#region Misc. Keywords
	const WhereKeyword = 'WHERE'
	const FromKeyword = 'FROM'
	const NilKeyword = 'NIL'
	const ToKeyword = 'TO'
	const StopKeyword = 'STOP'
	const AsKeyword = 'AS'
	const VariKeyword = 'VARI'
	const InOutKeyword = 'INOUT'
	const OutKeyword = 'OUT'
	const IsKeyword = 'IS'
	const InheritsKeyword = 'INHERITS'
	const ImplementsKeyword = 'IMPLEMENTS'
	const InKeyword = 'IN'
	const UseKeyword = 'USE'
	const ThisKeyword = 'THIS'
	const BaseKeyword = 'BASE'
	const TrueKeyword = 'TRUE'
	const FalseKeyword = 'FALSE'
	const DoKeyword = 'DO'
	const CatchKeyword = 'CATCH'
	const FinallyKeyword = 'FINALLY'
	const SuccessKeyword = 'SUCCESS'
	const OnKeyword = 'ON'
	const ElseKeyword = 'ELSE'
	#endregion
	
	#region Operators and Delimiters
	const Comma = 'COMMA'
	const Colon = 'COLON'
	const Dot = 'DOT'
	const QuestionMark = 'QUESTION'
	const ExclamationPoint = 'BANG'
	const OpenParenthesis = 'LPAREN'
	const CloseParenthesis = 'RPAREN'
	const OpenBracket = 'LBRACKET'
	const CloseBracket = 'RBRACKET'
	const OpenBrace = 'LCURLY'
	const CloseBrace = 'RCURLY'
	const NegationSign = 'MINUS'
	const PositiveSign = 'PLUS'

	const ListStart = .OpenBracket
	const ListEnd = .CloseBracket
	const SetStart = .OpenBrace
	const SetEnd = .CloseBrace

	const MemberAccessOperator = .Dot
	const IndexerStart = .OpenBracket
	const IndexerEnd = .CloseBracket
	const ArrayStart = 'ARRAY_OPEN'
	const ArrayEnd = .CloseBracket
	const InvocationStart = .OpenParenthesis
	const InvocationEnd = .CloseParenthesis

	const MethodReferenceOperator = 'REF'
	const OldValueOperator = 'OLD'
	const ExponentiationOperator = 'STARSTAR'

	const NilCoalescingOperator = .QuestionMark
	const NonNilCoalescingOperator = .ExclamationPoint

	const TypeCastOperator = .ToKeyword
	const NilCoalescingCastOperator = 'TOQ'

	const MultiplicationOperator = 'STAR'
	const DivisionOperator = 'SLASH'
	const IntegerDivisionOperator = 'SLASHSLASH'
	const ModulusOperator = 'PERCENT'

	const AdditionOperator = .PositiveSign
	const SubtractionOperator = .NegationSign

	const BitwiseShiftLeftOperator = 'DOUBLE_LT'
	const BitwiseShiftRightOperator = 'DOUBLE_GT'

	const BitwiseAndOperator = 'AMPERSAND'
	const BitwiseOrOperator = 'VERTICAL_BAR'
	const BitwiseXorOperator = 'CARET'

	const EqualityComparisonOperator = 'EQ'
	const InequalityComparisonOperator = 'NE'
	const LessThanOperator = 'LT'
	const GreaterThanOperator = 'GT'
	const LessThanEqualToOperator = 'LE'
	const GreaterThanEqualToOperator = 'GE'
	const ReferenceEqualityOperator = .IsKeyword
	const NonReferenceEqualityOperator = 'ISNOT'
	const InheritanceCheckOperator = .InheritsKeyword
	const ImplementationCheckOperator = .ImplementsKeyword

	const MembershipCheckOperator = .InKeyword
	const NonMembershipCheckOperator = 'NOTIN'

	const LogicalNotOperator = 'NOT'
	const LogicalAllOperator = 'ALL'
	const LogicalAnyOperator = 'ANY'
	const LogicalAndOperator = 'AND'
	const LogicalOrOperator = 'OR'

	const ImplicationOperator = 'IMPLIES'
	const AssignmentOperator = 'ASSIGN'
	const AddAndAssignOperator = 'PLUS_EQUALS'
	const SubtractAndAssignOperator = 'MINUS_EQUALS'
	const MultiplyAndAssignOperator = 'STAR_EQUALS'
	const ExponentAndAssignOperator = 'STARSTAR_EQUALS'
	const DivideAndAssignOperator = 'SLASH_EQUALS'
	const IntegerDivideAndAssignOperator = 'SLASHSLASH_EQUALS'
	const ModulusAndAssignOperator = 'PERCENT_EQUALS'
	const NilCoalesceAndAssignOperator = 'QUESTION_EQUALS'
	const NonNilCoalesceAndAssignOperator = 'BANG_EQUALS'
	const BitwiseAndAndAssignOperator = 'AMPERSAND_EQUALS'
	const BitwiseOrAndAssignOperator = 'VERTICAL_BAR_EQUALS'
	const BitwiseXorAndAssignOperator = 'CARET_EQUALS'
	const BitShiftLeftAndAssignOperator = 'DOUBLE_LT_EQUALS'
	const BitShiftRightAndAssignOperator = 'DOUBLE_GT_EQUALS'
	#endregion

	#region Operator Precedence
	invariant
		0 not in .binaryOperatorPrecedence.values

	shared, readonly
		# This was taken from the _binaryOpPrec dictionary from the Cobra compiler source
		# (see trunk\Source\CobraParser.cobra)
		var binaryOperatorPrecedence as IReadOnlyDictionary<of String, int> = {
			.MemberAccessOperator : 80,
			.IndexerStart: 80,
			.InvocationStart: 80,
			.ArrayStart: 80,
			
			.ExponentiationOperator: 70,
			
			.NilCoalescingOperator: 68,
			.NonNilCoalescingOperator: 68,
			
			.TypeCastOperator: 65,
			.NilCoalescingCastOperator: 65,
			
			.MultiplicationOperator: 60,
			.DivisionOperator: 60,
			.IntegerDivisionOperator: 60,
			.ModulusOperator: 60,
			
			.AdditionOperator: 50,
			.SubtractionOperator: 50,

			.BitwiseShiftLeftOperator: 47,
			.BitwiseShiftRightOperator: 47,

			.BitwiseAndOperator: 45,
			.BitwiseOrOperator: 45,
			.BitwiseXorOperator: 45,
			
			.EqualityComparisonOperator: 40,
			.InequalityComparisonOperator: 40,
			.LessThanOperator: 40,
			.GreaterThanOperator: 40,
			.LessThanEqualToOperator: 40,
			.GreaterThanEqualToOperator: 40,
			.ReferenceEqualityOperator: 40,
			.NonReferenceEqualityOperator: 40,
			.InheritanceCheckOperator: 40,
			.ImplementationCheckOperator: 40,
			
			.MembershipCheckOperator: 35,
			.NonMembershipCheckOperator: 35,
			
			.LogicalAndOperator: 30,
			.LogicalOrOperator: 30,
			
			.ImplicationOperator: 20,
			
			.AssignmentOperator: 20,
			.AddAndAssignOperator: 20,
			.SubtractAndAssignOperator: 20,
			.MultiplyAndAssignOperator: 20,
			.ExponentAndAssignOperator: 20,
			.DivideAndAssignOperator: 20,
			.IntegerDivideAndAssignOperator: 20,
			.ModulusAndAssignOperator: 20,
			.NilCoalesceAndAssignOperator: 20,
			.NonNilCoalesceAndAssignOperator: 20,
			
			.BitwiseAndAndAssignOperator: 20,
			.BitwiseOrAndAssignOperator: 20,
			.BitwiseXorAndAssignOperator: 20,
			.BitShiftLeftAndAssignOperator: 20,
			.BitShiftRightAndAssignOperator: 20,
		}
		
		var unaryOperatorPrecedence as IReadOnlyDictionary<of String, int> = {
			
			.NegationSign: .binaryOperatorPrecedence[.SubtractionOperator]+1,
			.PositiveSign: .binaryOperatorPrecedence[.AdditionOperator]+1,
			'TILDE': .binaryOperatorPrecedence[.AdditionOperator]+1, # what is this?

			.LogicalNotOperator: .binaryOperatorPrecedence[.LogicalAndOperator]+1,
			.LogicalAllOperator: .binaryOperatorPrecedence[.LogicalAndOperator]+1,
			.LogicalAnyOperator: .binaryOperatorPrecedence[.LogicalAndOperator]+1,

			.MethodReferenceOperator: .binaryOperatorPrecedence[.ExponentiationOperator]+1,
			.OldValueOperator: .binaryOperatorPrecedence[.ExponentiationOperator]+1,
			.CompilerDirective: .binaryOperatorPrecedence[.ExponentiationOperator]+1, # is this just for @help?
		}
	#endregion
	
	#region DocString tokens
	const DocStringLine = 'DOC_STRING_LINE'
	const DocStringStart = 'DOC_STRING_START'
	const DocStringContent = 'DOC_STRING_BODY_TEXT'
	const DocStringEnd = 'DOC_STRING_STOP'
	#endregion

	const Comment = "COMMENT"
	
	#region String and Character tokens
	const SingleQuotedString = 'STRING_SINGLE'
	const SingleQuotedStringStart = 'STRING_START_SINGLE'
	const SingleQuotedStringPart = 'STRING_PART_SINGLE'
	const SingleQuotedStringEnd = 'STRING_STOP_SINGLE'
	
	const DoubleQuotedString = 'STRING_DOUBLE'
	const DoubleQuotedStringStart = 'STRING_START_DOUBLE'
	const DoubleQuotedStringPart = 'STRING_PART_DOUBLE'
	const DoubleQuotedStringEnd = 'STRING_STOP_DOUBLE'

	const StringPartFormat = 'STRING_PART_FORMAT'

	const SingleQuotedCharacter = 'CHAR_LIT_SINGLE'
	const DoubleQuotedCharacter = 'CHAR_LIT_DOUBLE'
	#endregion
	
	#region Top-Level Declarations
	const NamespaceKeyword = 'NAMESPACE'
	const ClassKeyword = 'CLASS'
	const MixinKeyword = 'MIXIN'
	const InterfaceKeyword = 'INTERFACE'
	const SigKeyword = 'SIG'
	const StructKeyword = 'STRUCT'
	const EnumKeyword = 'ENUM'
	const ExtendKeyword = 'EXTEND'
	#endregion
	
	#region Member Declarations
	const CueKeyword = 'CUE'
	const MethodKeyword = 'DEF'
	const GetterKeyword = 'GET'
	const SetterKeyword = 'SET'
	const PropertyKeyword = 'PRO'
	const FieldKeyword = 'VAR'
	const ConstKeyword = 'CONST'
	const EventKeyword = 'EVENT'
	#endregion
	
	#region Tests and Contracts
	const TestKeyword = 'TEST'
	const InvariantKeyord = 'INVARIANT'
	const RequireKeyword = 'REQUIRE'
	const EnsureKeyword = 'ENSURE'
	#endregion
	
	#region Modifiers
	const SharedKeyword = 'SHARED'
	const OverrideKeyword = 'OVERRIDE'
	const AbstractKeyword = 'ABSTRACT'
	const ProtectedKeyword = 'PROTECTED'
	const PrivateKeyword = 'PRIVATE'
	const InternalKeyword = 'INTERNAL'
	const ReadOnlyKeyword = 'READONLY'
	const PartialKeyword = 'PARTIAL'
	const NonVirtualKeyword = 'NONVIRTUAL'
	const NewKeyword = 'NEW'
	const ExternKeyword = 'EXTERN'
	const PublicKeyword = 'PUBLIC'
	const VirtualKeyword = 'VIRTUAL'
	#endregion
	
	const Identifier = 'ID'
	const CallStart = 'OPEN_CALL'
	const CallEnd = .CloseParenthesis
	const GenericIdentifierStart = 'OPEN_GENERIC'
	const GenericIdentifierEnd = .GreaterThanOperator
	const AnonymousMethodStart = 'OPEN_DO'
	const IfExpressionStart = 'OPEN_IF'
	const IfExpressionEnd = .CloseParenthesis
	
	#region Statement Keywords
	const AssertKeyword = 'ASSERT'
	const BranchKeyword = 'BRANCH'
	const BreakKeyword = 'BREAK'
	const ContinueKeyword = 'CONTINUE'
	const ExpectKeyword = 'EXPECT'
	const ForKeyword = 'FOR'
	const IfKeyword = 'IF'
	const GetKeyword = 'GET'

	const ListenKeyword = 'LISTEN'
	const LockKeyword = 'LOCK'
	const IgnoreKeyword = 'IGNORE'
	const PassKeyword = 'PASS'
	const PostKeyword = 'POST'
	const PrintKeyword = 'PRINT'
	const RaiseKeyword = 'RAISE'
	const ReturnKeyword = 'RETURN'
	const ThrowKeyword = 'THROW'
	const TraceKeyword = 'TRACE'
	const TryKeyword = 'TRY'
	const UsingKeyword = 'USING'
	const WhileKeyword = 'WHILE'
	const YieldKeyword = 'YIELD'
	#endregion

	shared, readonly
		var namespaceStatementKeywords as IReadOnlyList<of String> = [
			.NamespaceKeyword,
			.ClassKeyword,
			.MixinKeyword,
			.InterfaceKeyword,
			.SigKeyword,
			.StructKeyword,
			.EnumKeyword,
			.ExtendKeyword,
			.UseKeyword
		]
			"""
			These are the keywords used to start statements that are valid inside of a namespace.
			In addition to namespace member declarations, use directives are also included.
			"""
		
		var typeDeclarationKeywords as IReadOnlyList<of String> = [
			.ClassKeyword,
			.MixinKeyword,
			.InterfaceKeyword,
			.SigKeyword,
			.StructKeyword,
			.EnumKeyword,
		]
			"""
			These are keywords used to start a type declaration.
			"""
		
		var modifierKeywords as IReadOnlyList<of String> = [
			.PublicKeyword,
			.ProtectedKeyword,
			.PrivateKeyword,
			.InternalKeyword,

			.NewKeyword,
			.OverrideKeyword,
			.NonVirtualKeyword,
			.VirtualKeyword,
			.SharedKeyword,
			.ExternKeyword,

			.AbstractKeyword,
			.PartialKeyword,
			.ReadOnlyKeyword,
		]
			"""
			These are the different keywords for modifiers that can be applied to declarations.
			They are sometimes called "is names" since they ususally follow the "is" keyword.
			However, they can also be used sometimes to start an indented block.
			"""