
namespace Venom.CobraSyntax

use ICobraToken = Cobra.Compiler.IToken

extend ICobraToken
	
	def kind as String
		return .which
	
	def endsBlock as bool
		"""
		Returns 'true' if this token terminates an indented block
		"""
		kind = .which
		return kind == TokenKind.Dedent _
			or kind == TokenKind.EndOfFile _
			or this is Cobra.Compiler.Token.empty
	
	def isMissing as bool
		"""
		When 'true' this indicates that this token was not found in a Cobra source file
		but was supposed to be.
		"""
		return .isEmpty and this is not Cobra.Compiler.Token.empty


interface IReadOnlyTokenList
	inherits IReadOnlyList<of ICobraToken>

	get first as ICobraToken
	get last as ICobraToken
	
class TokenList
	inherits List<of ICobraToken>
	implements IReadOnlyTokenList

	get first as ICobraToken
		return (this to IList<of ICobraToken>).first

	get last as ICobraToken
		return (this to IList<of ICobraToken>).last


interface ITokenStream
	"""
	Provides methods for seeking within a list of tokens.
	"""

	get token as ICobraToken
		"""
		Returns current token in the stream without advancing the stream to the next token.
		"""

	def peek(howFar = 1, skipComments = true) as ICobraToken
		"""
		Looks ahead in the token stream 'howFar' places and returns that Token.
		When 'skipComments' is 'true', comment tokens don't count when looking ahead.
		"""

	def grab as ICobraToken
		"""
		Returns the current token and advances the stream to the next token.
		"""
	
	def replace(token as ICobraToken)
		"""
		Replace the current token with the given one.
		"""

	def grabOptional(kind as String) as ICobraToken?
		"""
		Grabs and returns the current token if it matches the given 'kind' otherwise returns nil.
		"""

	def grabOneOf(kinds as IReadOnlyList<of String>) as ICobraToken
		"""
		Grabs the current token if it matches any of the given 'kinds'.
		If the next token doesn't match any of the given kinds then a missing
		token is generated for the first kind in the given list of 'kinds'.
		"""

	def grabOneOfOptional(kinds as IReadOnlyList<of String>) as ICobraToken?
		"""
		Grabs and returns the current token if it matches any of the given 'kinds' otherwise returns nil.
		"""
	
	def expect(kind as String) as ICobraToken
		"""
		Consume the current token if it matches the given kind and return it.
		Otherwise, return a token representing the one that is missing.
		"""

	def expect(kinds as IReadOnlyList<of String>) as TokenList
		"""
		Iterates through the given list of expected kinds and grabs tokens from
		the stream that match.  If the current token doesn't match an expected
		kind, then a token representing the one that is missing is created.
		All tokens either grabbed from the stream or created because they were missing
		are returned in a list.
		"""

	def skipTo(kind as String) as TokenList
		"""
		Consumes and returns all tokens up to and including the given kind.
		"""

	def skipToNextLine as TokenList
		"""
		Consumes all tokens up to and including the next end of the line token.
		
		The end of line token is not included in the list of skipped tokens.
		"""

	def skipBlankLines
		"""
		Consume and discard any end of line tokens.
		"""


class TokenStream
	implements ITokenStream

	var _currentIndex as int

	readonly
		var _tokenCount as int
		var _tokens as IReadOnlyTokenList
		var _emptyToken is shared = Cobra.Compiler.Token.empty

	invariant
		_currentIndex >= 0
		_tokenCount == _tokens.count
	
	cue init(path as String)
		.init(File.readAllText(path), path)

	cue init(source as String, path as String)
		base.init
		typeProvider = Cobra.Compiler.FakeTypeProvider() # TODO: Do we need a real typeProvider for parsing?
		tokenizer = CobraTokenizer(typeProvider)
		tokenizer.startSource(path, source)
		tokens = TokenList(tokenizer.allTokens)
		_tokens, _tokenCount = tokens, tokens.count
		_currentIndex = 0
	
	get token as ICobraToken
		test
			stream = TokenStream(Path.combine('TestData', 'Notepad.cobra'))
			assert stream.token.kind == TokenKind.DocStringStart
			assert stream.token is stream.token
		body
			return .peek(0)

	def peek(howFar = 1, skipComments = true) as ICobraToken
		require
			howFar >= 0
		test
			stream = TokenStream(Path.combine('TestData', 'Notepad.cobra'))
			assert stream.peek.kind == TokenKind.DocStringContent
			assert stream.peek(5).kind == TokenKind.DocStringEnd
			assert stream.peek(6).kind == TokenKind.EndOfLine
			assert stream.peek(10_000) is Cobra.Compiler.Token.empty
		test comments
			stream = TokenStream("/#\na block comment\n#/", 'just_a_comment.cobra')
			assert stream.peek(0, false).kind == TokenKind.Comment
			assert stream.peek(0, true).kind == TokenKind.EndOfLine

			stream = TokenStream(Path.combine('TestData', 'Notepad.cobra'))
			while stream.token.lineNum <> 150
				stream.grab
			stream.grab
			stream.grab
			assert stream.peek(0, false).kind == TokenKind.Comment
			assert stream.peek(0, false).text == "# main menu"
			assert stream.peek(0, true).kind <> TokenKind.Comment
			assert stream.token.kind <> TokenKind.Comment
			assert stream.peek(0) is stream.token
		body
			index = _currentIndex + howFar
			while index < _tokenCount
				token = _tokens[index]
				if skipComments and token.kind == TokenKind.Comment
					index += 1
				else
					return token
				
			return _emptyToken
	
	def grab as ICobraToken
		ensure
			_currentIndex < _tokenCount implies _currentIndex > old _currentIndex
			_currentIndex >= _tokenCount implies .token is Cobra.Compiler.Token.empty
		
		test basics
			stream = TokenStream(Path.combine('TestData', 'Notepad.cobra'))
			assert stream.grab.kind == TokenKind.DocStringStart
			assert stream.grab.kind == TokenKind.DocStringContent
			assert stream.grab is not stream.grab
		
		test readingPastEndOfStream
			stream = TokenStream(Path.combine('TestData', 'Notepad.cobra'))
			while stream.token is not Cobra.Compiler.Token.empty
				token = stream.grab
			assert token.isEOF
			assert stream.grab is stream.grab
			token = stream.grab
			assert not token.isEOF
			assert token.isEmpty
			assert token is stream.grab
			assert token is stream.grab
		
		body
			# The order here is important. Don't increment the index
			# and then read .token or we will be off by one.
			t = .token
			_currentIndex += 1
			return t
	
	def replace(token as ICobraToken)
		ensure
			.token is token
		test
			source = ".expect.kind"
			stream = TokenStream(source, "test.cobra")
			stream.grab

			token = stream.token
			assert token.text == "expect"
			assert token.kind == TokenKind.ExpectKeyword
			assert token.isKeyword

			stream.replace(token.copy(TokenKind.Identifier))
			token = stream.token
			assert token.text == "expect"
			assert token.kind == TokenKind.Identifier
			assert not token.isKeyword
		body
			tokens = _tokens to TokenList
			tokens[_currentIndex] = token

	def grabOptional(kind as String) as ICobraToken?
		if .token.kind == kind
			return .grab
		return nil

	def grabOneOf(kinds as IReadOnlyList<of String>) as ICobraToken
		require kinds.count > 0
		for kind in kinds
			token = .grabOptional(kind)
			if token <> nil, break
		if token == nil
			.expect(kinds[0])
		return token to !

	def grabOneOfOptional(kinds as IReadOnlyList<of String>) as ICobraToken?
		if .token.kind in kinds
			return .grab
		return nil

	def expect(kind as String) as ICobraToken
		t = .token
		if t.kind == kind
			return .grab
		
		missingToken = Cobra.Compiler.Token(
			t.fileName, t.lineNum, t.colNum, t.charNum, kind, "", nil, true
		)
		return missingToken

	def expect(kinds as IReadOnlyList<of String>) as TokenList
		require kinds.count > 0
		tokens = TokenList(kinds.count)
		for kind in kinds
			tokens.add(.expect(kind))
		return tokens

	def skipTo(kind as String) as TokenList
		skippedTokens = TokenList()
		while .token is not _emptyToken
			token = .grab
			skippedTokens.add(token)
			if token.kind == kind
				break
		return skippedTokens
	
	def skipToNextLine as TokenList
		skippedTokens = .skipTo(TokenKind.EndOfLine)
		if skippedTokens.last.kind == TokenKind.EndOfLine
			skippedTokens.remove(skippedTokens.last)
		return skippedTokens
	
	def skipBlankLines
		while .token.kind == TokenKind.EndOfLine
			.grab
	
	def toTechString as String
		sb = StringBuilder()
		for i in _currentIndex:_tokenCount
			sb.appendLine(.peek(i, false).toTechString)
		return sb.toString



interface IWhitespaceAgnosticTokenStream
	inherits ITokenStream
	"""
	Provides the same functionality as an ITokenStream but ignores all EOL, INDENT, and DEDENT tokens.
	"""

class WhitespaceAgnosticTokenStreamWrapper
	implements IWhitespaceAgnosticTokenStream
	"""
	Wraps an existing ITokenStream object but ignores all INDENT, EOL, or DEDENT tokens.

	When a token is grabbed from this stream, it is actually grabbed from the wrapped stream.
	Peeking does not modify the wrapped stream.
	"""

	readonly
		var _wrappedStream as ITokenStream
		var _whitespaceTokens as IReadOnlyList<of String> is shared = [
			TokenKind.EndOfLine, TokenKind.Indent, TokenKind.Dedent
		]

	cue init(stream as ITokenStream)
		base.init
		_wrappedStream = stream

	get token as ICobraToken
		return .peek(0)

	def peek(howFar = 1, skipComments = true) as ICobraToken
		ensure
			result.kind not in _whitespaceTokens
			_wrappedStream.token is old _wrappedStream.token
		test
			source =
			"weekDays = {\n" +
			"    'Monday', 'Tuesday', 'Wednesday',\n" +
			"    'Thursday', 'Friday'\n" +
			"}"
			wrappedStream = TokenStream(source, 'test.cobra')
			stream = WhitespaceAgnosticTokenStreamWrapper(wrappedStream)
			assert stream.peek(0).kind == wrappedStream.peek(0).kind == TokenKind.Identifier
			assert stream.peek(1).kind == wrappedStream.peek(1).kind == TokenKind.AssignmentOperator
			assert stream.peek(2).kind == wrappedStream.peek(2).kind == TokenKind.SetStart

			assert stream.peek(3).kind <> TokenKind.EndOfLine
			assert wrappedStream.peek(3).kind == TokenKind.EndOfLine

			assert stream.peek(3).kind <> TokenKind.Indent
			assert wrappedStream.peek(4).kind == TokenKind.Indent

			assert stream.peek(3).kind == wrappedStream.peek(5).kind == TokenKind.SingleQuotedString
		body
			token = _wrappedStream.peek(howFar, skipComments)
			while token.kind in _whitespaceTokens
				howFar += 1
				token = _wrappedStream.peek(howFar, skipComments)
			return token
	
	def grab as ICobraToken
		ensure result.kind not in _whitespaceTokens
		_skipWhitespace
		return _wrappedStream.grab
	
	def replace(token as ICobraToken)
		_skipWhitespace
		_wrappedStream.replace(token)

	def grabOptional(kind as String) as ICobraToken?
		require kind not in _whitespaceTokens
		if .token.kind == kind
			return .grab
		return nil

	def grabOneOf(kinds as IReadOnlyList<of String>) as ICobraToken
		require kinds.count > 0
		for kind in kinds
			token = .grabOptional(kind)
			if token <> nil, break
		if token == nil
			.expect(kinds[0])
		return token to !

	def grabOneOfOptional(kinds as IReadOnlyList<of String>) as ICobraToken?
		if .token.kind in kinds
			return .grab
		return nil

	def expect(kind as String) as ICobraToken
		t = .token
		if t.kind == kind
			return .grab
		
		missingToken = Cobra.Compiler.Token(
			t.fileName, t.lineNum, t.colNum, t.charNum, kind, "", nil, true
		)
		return missingToken

	def expect(kinds as IReadOnlyList<of String>) as TokenList
		require kinds.count > 0
		tokens = TokenList(kinds.count)
		for kind in kinds
			tokens.add(.expect(kind))
		return tokens

	def skipTo(kind as String) as TokenList
		require kind not in _whitespaceTokens
		skippedTokens = TokenList()
		while .token is not Cobra.Compiler.Token.empty
			token = .grab
			skippedTokens.add(token)
			if token.kind == kind
				break
		return skippedTokens
	
	def skipToNextLine as TokenList
		skippedTokens = _wrappedStream.skipToNextLine
		if skippedTokens.last.kind == TokenKind.EndOfLine
			skippedTokens.remove(skippedTokens.last)
		return skippedTokens
	
	def skipBlankLines
		_skipWhitespace

	def _skipWhitespace
		while _wrappedStream.token.kind in _whitespaceTokens
			_wrappedStream.grab
	
	def toTechString as String
		return _wrappedStream.toTechString