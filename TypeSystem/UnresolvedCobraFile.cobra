
use ICSharpCode

namespace Venom.TypeSystem

class UnresolvedCobraFile
	implements NRefactory.TypeSystem.IUnresolvedFile, NRefactory.Documentation.IUnresolvedDocumentationProvider
	has SerializableAttribute
	"""
	Represents a parsed file.
	"""
	
	#see here: https://github.com/icsharpcode/NRefactory/blob/master/ICSharpCode.NRefactory.CSharp/TypeSystem/CSharpUnresolvedFile.cs
	
	cue init(
		path as String,
		topLevelDefs as IList<of NRefactory.TypeSystem.IUnresolvedTypeDefinition>,
		asmAttributes as IList<of NRefactory.TypeSystem.IUnresolvedAttribute>,
		modAttributes as IList<of NRefactory.TypeSystem.IUnresolvedAttribute>,
		lastWriteTime as DateTime? = nil
	)
		base.init
		_path = path
		_topLevelTypeDefinitions = topLevelDefs
		_assemblyAttributes = asmAttributes
		_lastWriteTime = lastWriteTime
		_documentation = Dictionary<of NRefactory.TypeSystem.IUnresolvedEntity, String>()
	
	#region NRefactory.TypeSystem.IUnresolvedFile
	var _path as String
	get fileName from _path
		"""Full path to the file"""
	
	pro lastWriteTime from var as DateTime?
	
	get topLevelTypeDefinitions from var as IList<of NRefactory.TypeSystem.IUnresolvedTypeDefinition>
	
	get assemblyAttributes from var as IList<of NRefactory.TypeSystem.IUnresolvedAttribute>
	
	get moduleAttributes from var as IList<of NRefactory.TypeSystem.IUnresolvedAttribute>
	
	def getTopLevelTypeDefinition(
			location as NRefactory.TextLocation
		) as NRefactory.TypeSystem.IUnresolvedTypeDefinition?
		"""
		Returns the top-level type defined at the specified location or nil if no type is defined at that location.
		"""
		for typeDef in _topLevelTypeDefinitions
			if typeDef.region.isInside(location)
				return typeDef
		return nil
	
	def getInnermostTypeDefinition(
			location as NRefactory.TextLocation
		) as NRefactory.TypeSystem.IUnresolvedTypeDefinition?
		"""
		Returns the type (potentially nested) defined at the specified location or nil if no type is defined at that
		location.
		"""
		parent as NRefactory.TypeSystem.IUnresolvedTypeDefinition? = nil
		typeDef = .getTopLevelTypeDefinition(location)
		while typeDef <> nil
			parent = typeDef
			for nestedType in parent.nestedTypes
				if nestedType.region.isInside(location)
					typeDef = parent
		return parent
	
	def getMember(location as NRefactory.TextLocation) as NRefactory.TypeSystem.IUnresolvedMember?
		"""
		Returns the member defined at the specified location or nil if no member is defined at that location.
		"""
		typeDef = .getInnermostTypeDefinition(location)
		if typeDef == nil, return nil
		for member in typeDef.members
			if member.region.isInside(location)
				return member
		return nil
	
	get errors from var as IList<of NRefactory.TypeSystem.Error>
		"""
		The list of parser errors
		"""
	#endregion NRefactory.TypeSystem.IUnresolvedFile
	
	
	get documentation from var as IDictionary<of NRefactory.TypeSystem.IUnresolvedEntity, String>
	
	#region NRefactory.Documentation.IUnresolvedDocumentationProvider
	def getDocumentation(entity as NRefactory.TypeSystem.IUnresolvedEntity) as String?
		"""Gets the XML documentation for the specified entity"""
		return if(.documentation.containsKey(entity), .documentation[entity], nil)
	
	def getDocumentation(
			entity as NRefactory.TypeSystem.IUnresolvedEntity,
			resolvedEntity as NRefactory.TypeSystem.IEntity
		) as NRefactory.Documentation.DocumentationComment?
		"""Gets the XML documentation for the specified entity"""
		doc = .getDocumentation(entity)
		if doc <> nil
			return NRefactory.Documentation.DocumentationComment(
				NRefactory.Editor.StringTextSource(doc),
				NRefactory.TypeSystem.SimpleTypeResolveContext(resolvedEntity)
			)
		return nil
	#region NRefactory.Documentation.IUnresolvedDocumentationProvider